// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: restsystem.proto

#ifndef PROTOBUF_restsystem_2eproto__INCLUDED
#define PROTOBUF_restsystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class RestGetCodecInfo;
class RestGetCodecInfoDefaultTypeInternal;
VE_LIBRARY_API extern RestGetCodecInfoDefaultTypeInternal _RestGetCodecInfo_default_instance_;
class RestGetDeviceSummary;
class RestGetDeviceSummaryDefaultTypeInternal;
VE_LIBRARY_API extern RestGetDeviceSummaryDefaultTypeInternal _RestGetDeviceSummary_default_instance_;
class RestGetRunInfo;
class RestGetRunInfoDefaultTypeInternal;
VE_LIBRARY_API extern RestGetRunInfoDefaultTypeInternal _RestGetRunInfo_default_instance_;
class RestGetSystemInfo;
class RestGetSystemInfoDefaultTypeInternal;
VE_LIBRARY_API extern RestGetSystemInfoDefaultTypeInternal _RestGetSystemInfo_default_instance_;
class RestGetVolumes;
class RestGetVolumesDefaultTypeInternal;
VE_LIBRARY_API extern RestGetVolumesDefaultTypeInternal _RestGetVolumes_default_instance_;
class RestKeepalive;
class RestKeepaliveDefaultTypeInternal;
VE_LIBRARY_API extern RestKeepaliveDefaultTypeInternal _RestKeepalive_default_instance_;
class RestLogin;
class RestLoginDefaultTypeInternal;
VE_LIBRARY_API extern RestLoginDefaultTypeInternal _RestLogin_default_instance_;
class RestLogout;
class RestLogoutDefaultTypeInternal;
VE_LIBRARY_API extern RestLogoutDefaultTypeInternal _RestLogout_default_instance_;
class RestUpdateUser;
class RestUpdateUserDefaultTypeInternal;
VE_LIBRARY_API extern RestUpdateUserDefaultTypeInternal _RestUpdateUser_default_instance_;
class Volumes;
class VolumesDefaultTypeInternal;
VE_LIBRARY_API extern VolumesDefaultTypeInternal _Volumes_default_instance_;

namespace protobuf_restsystem_2eproto {
// Internal implementation detail -- do not call these.
struct VE_LIBRARY_API TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void VE_LIBRARY_API AddDescriptors();
void VE_LIBRARY_API InitDefaults();
}  // namespace protobuf_restsystem_2eproto

// ===================================================================

class VE_LIBRARY_API RestGetCodecInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RestGetCodecInfo) */ {
 public:
  RestGetCodecInfo();
  virtual ~RestGetCodecInfo();

  RestGetCodecInfo(const RestGetCodecInfo& from);

  inline RestGetCodecInfo& operator=(const RestGetCodecInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestGetCodecInfo& default_instance();

  static inline const RestGetCodecInfo* internal_default_instance() {
    return reinterpret_cast<const RestGetCodecInfo*>(
               &_RestGetCodecInfo_default_instance_);
  }

  void Swap(RestGetCodecInfo* other);

  // implements Message ----------------------------------------------

  inline RestGetCodecInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RestGetCodecInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RestGetCodecInfo& from);
  void MergeFrom(const RestGetCodecInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RestGetCodecInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strCPUModel = 3;
  void clear_strcpumodel();
  static const int kStrCPUModelFieldNumber = 3;
  const ::std::string& strcpumodel() const;
  void set_strcpumodel(const ::std::string& value);
  #if LANG_CXX11
  void set_strcpumodel(::std::string&& value);
  #endif
  void set_strcpumodel(const char* value);
  void set_strcpumodel(const char* value, size_t size);
  ::std::string* mutable_strcpumodel();
  ::std::string* release_strcpumodel();
  void set_allocated_strcpumodel(::std::string* strcpumodel);

  // string strHWEncoders = 4;
  void clear_strhwencoders();
  static const int kStrHWEncodersFieldNumber = 4;
  const ::std::string& strhwencoders() const;
  void set_strhwencoders(const ::std::string& value);
  #if LANG_CXX11
  void set_strhwencoders(::std::string&& value);
  #endif
  void set_strhwencoders(const char* value);
  void set_strhwencoders(const char* value, size_t size);
  ::std::string* mutable_strhwencoders();
  ::std::string* release_strhwencoders();
  void set_allocated_strhwencoders(::std::string* strhwencoders);

  // string strHWDecoders = 5;
  void clear_strhwdecoders();
  static const int kStrHWDecodersFieldNumber = 5;
  const ::std::string& strhwdecoders() const;
  void set_strhwdecoders(const ::std::string& value);
  #if LANG_CXX11
  void set_strhwdecoders(::std::string&& value);
  #endif
  void set_strhwdecoders(const char* value);
  void set_strhwdecoders(const char* value, size_t size);
  ::std::string* mutable_strhwdecoders();
  ::std::string* release_strhwdecoders();
  void set_allocated_strhwdecoders(::std::string* strhwdecoders);

  // string strSWEncoders = 6;
  void clear_strswencoders();
  static const int kStrSWEncodersFieldNumber = 6;
  const ::std::string& strswencoders() const;
  void set_strswencoders(const ::std::string& value);
  #if LANG_CXX11
  void set_strswencoders(::std::string&& value);
  #endif
  void set_strswencoders(const char* value);
  void set_strswencoders(const char* value, size_t size);
  ::std::string* mutable_strswencoders();
  ::std::string* release_strswencoders();
  void set_allocated_strswencoders(::std::string* strswencoders);

  // string strSWDecoders = 7;
  void clear_strswdecoders();
  static const int kStrSWDecodersFieldNumber = 7;
  const ::std::string& strswdecoders() const;
  void set_strswdecoders(const ::std::string& value);
  #if LANG_CXX11
  void set_strswdecoders(::std::string&& value);
  #endif
  void set_strswdecoders(const char* value);
  void set_strswdecoders(const char* value, size_t size);
  ::std::string* mutable_strswdecoders();
  ::std::string* release_strswdecoders();
  void set_allocated_strswdecoders(::std::string* strswdecoders);

  // int32 nCPU = 1;
  void clear_ncpu();
  static const int kNCPUFieldNumber = 1;
  ::google::protobuf::int32 ncpu() const;
  void set_ncpu(::google::protobuf::int32 value);

  // int32 nCPUCore = 2;
  void clear_ncpucore();
  static const int kNCPUCoreFieldNumber = 2;
  ::google::protobuf::int32 ncpucore() const;
  void set_ncpucore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RestGetCodecInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strcpumodel_;
  ::google::protobuf::internal::ArenaStringPtr strhwencoders_;
  ::google::protobuf::internal::ArenaStringPtr strhwdecoders_;
  ::google::protobuf::internal::ArenaStringPtr strswencoders_;
  ::google::protobuf::internal::ArenaStringPtr strswdecoders_;
  ::google::protobuf::int32 ncpu_;
  ::google::protobuf::int32 ncpucore_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API RestGetDeviceSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RestGetDeviceSummary) */ {
 public:
  RestGetDeviceSummary();
  virtual ~RestGetDeviceSummary();

  RestGetDeviceSummary(const RestGetDeviceSummary& from);

  inline RestGetDeviceSummary& operator=(const RestGetDeviceSummary& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestGetDeviceSummary& default_instance();

  static inline const RestGetDeviceSummary* internal_default_instance() {
    return reinterpret_cast<const RestGetDeviceSummary*>(
               &_RestGetDeviceSummary_default_instance_);
  }

  void Swap(RestGetDeviceSummary* other);

  // implements Message ----------------------------------------------

  inline RestGetDeviceSummary* New() const PROTOBUF_FINAL { return New(NULL); }

  RestGetDeviceSummary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RestGetDeviceSummary& from);
  void MergeFrom(const RestGetDeviceSummary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RestGetDeviceSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nCameraTotal = 1;
  void clear_ncameratotal();
  static const int kNCameraTotalFieldNumber = 1;
  const ::std::string& ncameratotal() const;
  void set_ncameratotal(const ::std::string& value);
  #if LANG_CXX11
  void set_ncameratotal(::std::string&& value);
  #endif
  void set_ncameratotal(const char* value);
  void set_ncameratotal(const char* value, size_t size);
  ::std::string* mutable_ncameratotal();
  ::std::string* release_ncameratotal();
  void set_allocated_ncameratotal(::std::string* ncameratotal);

  // string nCameraOnline = 2;
  void clear_ncameraonline();
  static const int kNCameraOnlineFieldNumber = 2;
  const ::std::string& ncameraonline() const;
  void set_ncameraonline(const ::std::string& value);
  #if LANG_CXX11
  void set_ncameraonline(::std::string&& value);
  #endif
  void set_ncameraonline(const char* value);
  void set_ncameraonline(const char* value, size_t size);
  ::std::string* mutable_ncameraonline();
  ::std::string* release_ncameraonline();
  void set_allocated_ncameraonline(::std::string* ncameraonline);

  // string nHikDevTotal = 3;
  void clear_nhikdevtotal();
  static const int kNHikDevTotalFieldNumber = 3;
  const ::std::string& nhikdevtotal() const;
  void set_nhikdevtotal(const ::std::string& value);
  #if LANG_CXX11
  void set_nhikdevtotal(::std::string&& value);
  #endif
  void set_nhikdevtotal(const char* value);
  void set_nhikdevtotal(const char* value, size_t size);
  ::std::string* mutable_nhikdevtotal();
  ::std::string* release_nhikdevtotal();
  void set_allocated_nhikdevtotal(::std::string* nhikdevtotal);

  // string nHikDevOnline = 4;
  void clear_nhikdevonline();
  static const int kNHikDevOnlineFieldNumber = 4;
  const ::std::string& nhikdevonline() const;
  void set_nhikdevonline(const ::std::string& value);
  #if LANG_CXX11
  void set_nhikdevonline(::std::string&& value);
  #endif
  void set_nhikdevonline(const char* value);
  void set_nhikdevonline(const char* value, size_t size);
  ::std::string* mutable_nhikdevonline();
  ::std::string* release_nhikdevonline();
  void set_allocated_nhikdevonline(::std::string* nhikdevonline);

  // string nDhDevTotal = 5;
  void clear_ndhdevtotal();
  static const int kNDhDevTotalFieldNumber = 5;
  const ::std::string& ndhdevtotal() const;
  void set_ndhdevtotal(const ::std::string& value);
  #if LANG_CXX11
  void set_ndhdevtotal(::std::string&& value);
  #endif
  void set_ndhdevtotal(const char* value);
  void set_ndhdevtotal(const char* value, size_t size);
  ::std::string* mutable_ndhdevtotal();
  ::std::string* release_ndhdevtotal();
  void set_allocated_ndhdevtotal(::std::string* ndhdevtotal);

  // string nDhDevOnline = 6;
  void clear_ndhdevonline();
  static const int kNDhDevOnlineFieldNumber = 6;
  const ::std::string& ndhdevonline() const;
  void set_ndhdevonline(const ::std::string& value);
  #if LANG_CXX11
  void set_ndhdevonline(::std::string&& value);
  #endif
  void set_ndhdevonline(const char* value);
  void set_ndhdevonline(const char* value, size_t size);
  ::std::string* mutable_ndhdevonline();
  ::std::string* release_ndhdevonline();
  void set_allocated_ndhdevonline(::std::string* ndhdevonline);

  // string nHikIscDevTotal = 7;
  void clear_nhikiscdevtotal();
  static const int kNHikIscDevTotalFieldNumber = 7;
  const ::std::string& nhikiscdevtotal() const;
  void set_nhikiscdevtotal(const ::std::string& value);
  #if LANG_CXX11
  void set_nhikiscdevtotal(::std::string&& value);
  #endif
  void set_nhikiscdevtotal(const char* value);
  void set_nhikiscdevtotal(const char* value, size_t size);
  ::std::string* mutable_nhikiscdevtotal();
  ::std::string* release_nhikiscdevtotal();
  void set_allocated_nhikiscdevtotal(::std::string* nhikiscdevtotal);

  // string nHikIscDevOnline = 8;
  void clear_nhikiscdevonline();
  static const int kNHikIscDevOnlineFieldNumber = 8;
  const ::std::string& nhikiscdevonline() const;
  void set_nhikiscdevonline(const ::std::string& value);
  #if LANG_CXX11
  void set_nhikiscdevonline(::std::string&& value);
  #endif
  void set_nhikiscdevonline(const char* value);
  void set_nhikiscdevonline(const char* value, size_t size);
  ::std::string* mutable_nhikiscdevonline();
  ::std::string* release_nhikiscdevonline();
  void set_allocated_nhikiscdevonline(::std::string* nhikiscdevonline);

  // string nTdDevTotal = 9;
  void clear_ntddevtotal();
  static const int kNTdDevTotalFieldNumber = 9;
  const ::std::string& ntddevtotal() const;
  void set_ntddevtotal(const ::std::string& value);
  #if LANG_CXX11
  void set_ntddevtotal(::std::string&& value);
  #endif
  void set_ntddevtotal(const char* value);
  void set_ntddevtotal(const char* value, size_t size);
  ::std::string* mutable_ntddevtotal();
  ::std::string* release_ntddevtotal();
  void set_allocated_ntddevtotal(::std::string* ntddevtotal);

  // string nTdDevOnline = 10;
  void clear_ntddevonline();
  static const int kNTdDevOnlineFieldNumber = 10;
  const ::std::string& ntddevonline() const;
  void set_ntddevonline(const ::std::string& value);
  #if LANG_CXX11
  void set_ntddevonline(::std::string&& value);
  #endif
  void set_ntddevonline(const char* value);
  void set_ntddevonline(const char* value, size_t size);
  ::std::string* mutable_ntddevonline();
  ::std::string* release_ntddevonline();
  void set_allocated_ntddevonline(::std::string* ntddevonline);

  // string nGbDevTotal = 11;
  void clear_ngbdevtotal();
  static const int kNGbDevTotalFieldNumber = 11;
  const ::std::string& ngbdevtotal() const;
  void set_ngbdevtotal(const ::std::string& value);
  #if LANG_CXX11
  void set_ngbdevtotal(::std::string&& value);
  #endif
  void set_ngbdevtotal(const char* value);
  void set_ngbdevtotal(const char* value, size_t size);
  ::std::string* mutable_ngbdevtotal();
  ::std::string* release_ngbdevtotal();
  void set_allocated_ngbdevtotal(::std::string* ngbdevtotal);

  // string nGbDevOnline = 12;
  void clear_ngbdevonline();
  static const int kNGbDevOnlineFieldNumber = 12;
  const ::std::string& ngbdevonline() const;
  void set_ngbdevonline(const ::std::string& value);
  #if LANG_CXX11
  void set_ngbdevonline(::std::string&& value);
  #endif
  void set_ngbdevonline(const char* value);
  void set_ngbdevonline(const char* value, size_t size);
  ::std::string* mutable_ngbdevonline();
  ::std::string* release_ngbdevonline();
  void set_allocated_ngbdevonline(::std::string* ngbdevonline);

  // string nCloudTotal = 13;
  void clear_ncloudtotal();
  static const int kNCloudTotalFieldNumber = 13;
  const ::std::string& ncloudtotal() const;
  void set_ncloudtotal(const ::std::string& value);
  #if LANG_CXX11
  void set_ncloudtotal(::std::string&& value);
  #endif
  void set_ncloudtotal(const char* value);
  void set_ncloudtotal(const char* value, size_t size);
  ::std::string* mutable_ncloudtotal();
  ::std::string* release_ncloudtotal();
  void set_allocated_ncloudtotal(::std::string* ncloudtotal);

  // string nCloudOnline = 14;
  void clear_ncloudonline();
  static const int kNCloudOnlineFieldNumber = 14;
  const ::std::string& ncloudonline() const;
  void set_ncloudonline(const ::std::string& value);
  #if LANG_CXX11
  void set_ncloudonline(::std::string&& value);
  #endif
  void set_ncloudonline(const char* value);
  void set_ncloudonline(const char* value, size_t size);
  ::std::string* mutable_ncloudonline();
  ::std::string* release_ncloudonline();
  void set_allocated_ncloudonline(::std::string* ncloudonline);

  // string nRTSPRTMPTotal = 15;
  void clear_nrtsprtmptotal();
  static const int kNRTSPRTMPTotalFieldNumber = 15;
  const ::std::string& nrtsprtmptotal() const;
  void set_nrtsprtmptotal(const ::std::string& value);
  #if LANG_CXX11
  void set_nrtsprtmptotal(::std::string&& value);
  #endif
  void set_nrtsprtmptotal(const char* value);
  void set_nrtsprtmptotal(const char* value, size_t size);
  ::std::string* mutable_nrtsprtmptotal();
  ::std::string* release_nrtsprtmptotal();
  void set_allocated_nrtsprtmptotal(::std::string* nrtsprtmptotal);

  // string nRTSPRTMPOnline = 16;
  void clear_nrtsprtmponline();
  static const int kNRTSPRTMPOnlineFieldNumber = 16;
  const ::std::string& nrtsprtmponline() const;
  void set_nrtsprtmponline(const ::std::string& value);
  #if LANG_CXX11
  void set_nrtsprtmponline(::std::string&& value);
  #endif
  void set_nrtsprtmponline(const char* value);
  void set_nrtsprtmponline(const char* value, size_t size);
  ::std::string* mutable_nrtsprtmponline();
  ::std::string* release_nrtsprtmponline();
  void set_allocated_nrtsprtmponline(::std::string* nrtsprtmponline);

  // string nONVIFTotal = 17;
  void clear_nonviftotal();
  static const int kNONVIFTotalFieldNumber = 17;
  const ::std::string& nonviftotal() const;
  void set_nonviftotal(const ::std::string& value);
  #if LANG_CXX11
  void set_nonviftotal(::std::string&& value);
  #endif
  void set_nonviftotal(const char* value);
  void set_nonviftotal(const char* value, size_t size);
  ::std::string* mutable_nonviftotal();
  ::std::string* release_nonviftotal();
  void set_allocated_nonviftotal(::std::string* nonviftotal);

  // string nONVIFOnline = 18;
  void clear_nonvifonline();
  static const int kNONVIFOnlineFieldNumber = 18;
  const ::std::string& nonvifonline() const;
  void set_nonvifonline(const ::std::string& value);
  #if LANG_CXX11
  void set_nonvifonline(::std::string&& value);
  #endif
  void set_nonvifonline(const char* value);
  void set_nonvifonline(const char* value, size_t size);
  ::std::string* mutable_nonvifonline();
  ::std::string* release_nonvifonline();
  void set_allocated_nonvifonline(::std::string* nonvifonline);

  // string nRTMPPushTotal = 19;
  void clear_nrtmppushtotal();
  static const int kNRTMPPushTotalFieldNumber = 19;
  const ::std::string& nrtmppushtotal() const;
  void set_nrtmppushtotal(const ::std::string& value);
  #if LANG_CXX11
  void set_nrtmppushtotal(::std::string&& value);
  #endif
  void set_nrtmppushtotal(const char* value);
  void set_nrtmppushtotal(const char* value, size_t size);
  ::std::string* mutable_nrtmppushtotal();
  ::std::string* release_nrtmppushtotal();
  void set_allocated_nrtmppushtotal(::std::string* nrtmppushtotal);

  // string nRTMPPushOnline = 20;
  void clear_nrtmppushonline();
  static const int kNRTMPPushOnlineFieldNumber = 20;
  const ::std::string& nrtmppushonline() const;
  void set_nrtmppushonline(const ::std::string& value);
  #if LANG_CXX11
  void set_nrtmppushonline(::std::string&& value);
  #endif
  void set_nrtmppushonline(const char* value);
  void set_nrtmppushonline(const char* value, size_t size);
  ::std::string* mutable_nrtmppushonline();
  ::std::string* release_nrtmppushonline();
  void set_allocated_nrtmppushonline(::std::string* nrtmppushonline);

  // @@protoc_insertion_point(class_scope:RestGetDeviceSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ncameratotal_;
  ::google::protobuf::internal::ArenaStringPtr ncameraonline_;
  ::google::protobuf::internal::ArenaStringPtr nhikdevtotal_;
  ::google::protobuf::internal::ArenaStringPtr nhikdevonline_;
  ::google::protobuf::internal::ArenaStringPtr ndhdevtotal_;
  ::google::protobuf::internal::ArenaStringPtr ndhdevonline_;
  ::google::protobuf::internal::ArenaStringPtr nhikiscdevtotal_;
  ::google::protobuf::internal::ArenaStringPtr nhikiscdevonline_;
  ::google::protobuf::internal::ArenaStringPtr ntddevtotal_;
  ::google::protobuf::internal::ArenaStringPtr ntddevonline_;
  ::google::protobuf::internal::ArenaStringPtr ngbdevtotal_;
  ::google::protobuf::internal::ArenaStringPtr ngbdevonline_;
  ::google::protobuf::internal::ArenaStringPtr ncloudtotal_;
  ::google::protobuf::internal::ArenaStringPtr ncloudonline_;
  ::google::protobuf::internal::ArenaStringPtr nrtsprtmptotal_;
  ::google::protobuf::internal::ArenaStringPtr nrtsprtmponline_;
  ::google::protobuf::internal::ArenaStringPtr nonviftotal_;
  ::google::protobuf::internal::ArenaStringPtr nonvifonline_;
  ::google::protobuf::internal::ArenaStringPtr nrtmppushtotal_;
  ::google::protobuf::internal::ArenaStringPtr nrtmppushonline_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API RestGetRunInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RestGetRunInfo) */ {
 public:
  RestGetRunInfo();
  virtual ~RestGetRunInfo();

  RestGetRunInfo(const RestGetRunInfo& from);

  inline RestGetRunInfo& operator=(const RestGetRunInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestGetRunInfo& default_instance();

  static inline const RestGetRunInfo* internal_default_instance() {
    return reinterpret_cast<const RestGetRunInfo*>(
               &_RestGetRunInfo_default_instance_);
  }

  void Swap(RestGetRunInfo* other);

  // implements Message ----------------------------------------------

  inline RestGetRunInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RestGetRunInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RestGetRunInfo& from);
  void MergeFrom(const RestGetRunInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RestGetRunInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strRunTime = 1;
  void clear_strruntime();
  static const int kStrRunTimeFieldNumber = 1;
  const ::std::string& strruntime() const;
  void set_strruntime(const ::std::string& value);
  #if LANG_CXX11
  void set_strruntime(::std::string&& value);
  #endif
  void set_strruntime(const char* value);
  void set_strruntime(const char* value, size_t size);
  ::std::string* mutable_strruntime();
  ::std::string* release_strruntime();
  void set_allocated_strruntime(::std::string* strruntime);

  // string strCPU = 2;
  void clear_strcpu();
  static const int kStrCPUFieldNumber = 2;
  const ::std::string& strcpu() const;
  void set_strcpu(const ::std::string& value);
  #if LANG_CXX11
  void set_strcpu(::std::string&& value);
  #endif
  void set_strcpu(const char* value);
  void set_strcpu(const char* value, size_t size);
  ::std::string* mutable_strcpu();
  ::std::string* release_strcpu();
  void set_allocated_strcpu(::std::string* strcpu);

  // string strMemory = 3;
  void clear_strmemory();
  static const int kStrMemoryFieldNumber = 3;
  const ::std::string& strmemory() const;
  void set_strmemory(const ::std::string& value);
  #if LANG_CXX11
  void set_strmemory(::std::string&& value);
  #endif
  void set_strmemory(const char* value);
  void set_strmemory(const char* value, size_t size);
  ::std::string* mutable_strmemory();
  ::std::string* release_strmemory();
  void set_allocated_strmemory(::std::string* strmemory);

  // string strNetworkIn = 4;
  void clear_strnetworkin();
  static const int kStrNetworkInFieldNumber = 4;
  const ::std::string& strnetworkin() const;
  void set_strnetworkin(const ::std::string& value);
  #if LANG_CXX11
  void set_strnetworkin(::std::string&& value);
  #endif
  void set_strnetworkin(const char* value);
  void set_strnetworkin(const char* value, size_t size);
  ::std::string* mutable_strnetworkin();
  ::std::string* release_strnetworkin();
  void set_allocated_strnetworkin(::std::string* strnetworkin);

  // string strNetworkOut = 5;
  void clear_strnetworkout();
  static const int kStrNetworkOutFieldNumber = 5;
  const ::std::string& strnetworkout() const;
  void set_strnetworkout(const ::std::string& value);
  #if LANG_CXX11
  void set_strnetworkout(::std::string&& value);
  #endif
  void set_strnetworkout(const char* value);
  void set_strnetworkout(const char* value, size_t size);
  ::std::string* mutable_strnetworkout();
  ::std::string* release_strnetworkout();
  void set_allocated_strnetworkout(::std::string* strnetworkout);

  // string strTotalSpace = 6;
  void clear_strtotalspace();
  static const int kStrTotalSpaceFieldNumber = 6;
  const ::std::string& strtotalspace() const;
  void set_strtotalspace(const ::std::string& value);
  #if LANG_CXX11
  void set_strtotalspace(::std::string&& value);
  #endif
  void set_strtotalspace(const char* value);
  void set_strtotalspace(const char* value, size_t size);
  ::std::string* mutable_strtotalspace();
  ::std::string* release_strtotalspace();
  void set_allocated_strtotalspace(::std::string* strtotalspace);

  // string strFreeSpace = 7;
  void clear_strfreespace();
  static const int kStrFreeSpaceFieldNumber = 7;
  const ::std::string& strfreespace() const;
  void set_strfreespace(const ::std::string& value);
  #if LANG_CXX11
  void set_strfreespace(::std::string&& value);
  #endif
  void set_strfreespace(const char* value);
  void set_strfreespace(const char* value, size_t size);
  ::std::string* mutable_strfreespace();
  ::std::string* release_strfreespace();
  void set_allocated_strfreespace(::std::string* strfreespace);

  // string nRunTimeSec = 8;
  void clear_nruntimesec();
  static const int kNRunTimeSecFieldNumber = 8;
  const ::std::string& nruntimesec() const;
  void set_nruntimesec(const ::std::string& value);
  #if LANG_CXX11
  void set_nruntimesec(::std::string&& value);
  #endif
  void set_nruntimesec(const char* value);
  void set_nruntimesec(const char* value, size_t size);
  ::std::string* mutable_nruntimesec();
  ::std::string* release_nruntimesec();
  void set_allocated_nruntimesec(::std::string* nruntimesec);

  // string nCPUUsage = 9;
  void clear_ncpuusage();
  static const int kNCPUUsageFieldNumber = 9;
  const ::std::string& ncpuusage() const;
  void set_ncpuusage(const ::std::string& value);
  #if LANG_CXX11
  void set_ncpuusage(::std::string&& value);
  #endif
  void set_ncpuusage(const char* value);
  void set_ncpuusage(const char* value, size_t size);
  ::std::string* mutable_ncpuusage();
  ::std::string* release_ncpuusage();
  void set_allocated_ncpuusage(::std::string* ncpuusage);

  // string nMemoryUsage = 10;
  void clear_nmemoryusage();
  static const int kNMemoryUsageFieldNumber = 10;
  const ::std::string& nmemoryusage() const;
  void set_nmemoryusage(const ::std::string& value);
  #if LANG_CXX11
  void set_nmemoryusage(::std::string&& value);
  #endif
  void set_nmemoryusage(const char* value);
  void set_nmemoryusage(const char* value, size_t size);
  ::std::string* mutable_nmemoryusage();
  ::std::string* release_nmemoryusage();
  void set_allocated_nmemoryusage(::std::string* nmemoryusage);

  // string nTotalMemoryByte = 11;
  void clear_ntotalmemorybyte();
  static const int kNTotalMemoryByteFieldNumber = 11;
  const ::std::string& ntotalmemorybyte() const;
  void set_ntotalmemorybyte(const ::std::string& value);
  #if LANG_CXX11
  void set_ntotalmemorybyte(::std::string&& value);
  #endif
  void set_ntotalmemorybyte(const char* value);
  void set_ntotalmemorybyte(const char* value, size_t size);
  ::std::string* mutable_ntotalmemorybyte();
  ::std::string* release_ntotalmemorybyte();
  void set_allocated_ntotalmemorybyte(::std::string* ntotalmemorybyte);

  // string nNetworkInK = 12;
  void clear_nnetworkink();
  static const int kNNetworkInKFieldNumber = 12;
  const ::std::string& nnetworkink() const;
  void set_nnetworkink(const ::std::string& value);
  #if LANG_CXX11
  void set_nnetworkink(::std::string&& value);
  #endif
  void set_nnetworkink(const char* value);
  void set_nnetworkink(const char* value, size_t size);
  ::std::string* mutable_nnetworkink();
  ::std::string* release_nnetworkink();
  void set_allocated_nnetworkink(::std::string* nnetworkink);

  // string nNetworkOutK = 13;
  void clear_nnetworkoutk();
  static const int kNNetworkOutKFieldNumber = 13;
  const ::std::string& nnetworkoutk() const;
  void set_nnetworkoutk(const ::std::string& value);
  #if LANG_CXX11
  void set_nnetworkoutk(::std::string&& value);
  #endif
  void set_nnetworkoutk(const char* value);
  void set_nnetworkoutk(const char* value, size_t size);
  ::std::string* mutable_nnetworkoutk();
  ::std::string* release_nnetworkoutk();
  void set_allocated_nnetworkoutk(::std::string* nnetworkoutk);

  // string nTotalSpaceByte = 14;
  void clear_ntotalspacebyte();
  static const int kNTotalSpaceByteFieldNumber = 14;
  const ::std::string& ntotalspacebyte() const;
  void set_ntotalspacebyte(const ::std::string& value);
  #if LANG_CXX11
  void set_ntotalspacebyte(::std::string&& value);
  #endif
  void set_ntotalspacebyte(const char* value);
  void set_ntotalspacebyte(const char* value, size_t size);
  ::std::string* mutable_ntotalspacebyte();
  ::std::string* release_ntotalspacebyte();
  void set_allocated_ntotalspacebyte(::std::string* ntotalspacebyte);

  // string nFreeSpaceByte = 15;
  void clear_nfreespacebyte();
  static const int kNFreeSpaceByteFieldNumber = 15;
  const ::std::string& nfreespacebyte() const;
  void set_nfreespacebyte(const ::std::string& value);
  #if LANG_CXX11
  void set_nfreespacebyte(::std::string&& value);
  #endif
  void set_nfreespacebyte(const char* value);
  void set_nfreespacebyte(const char* value, size_t size);
  ::std::string* mutable_nfreespacebyte();
  ::std::string* release_nfreespacebyte();
  void set_allocated_nfreespacebyte(::std::string* nfreespacebyte);

  // @@protoc_insertion_point(class_scope:RestGetRunInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strruntime_;
  ::google::protobuf::internal::ArenaStringPtr strcpu_;
  ::google::protobuf::internal::ArenaStringPtr strmemory_;
  ::google::protobuf::internal::ArenaStringPtr strnetworkin_;
  ::google::protobuf::internal::ArenaStringPtr strnetworkout_;
  ::google::protobuf::internal::ArenaStringPtr strtotalspace_;
  ::google::protobuf::internal::ArenaStringPtr strfreespace_;
  ::google::protobuf::internal::ArenaStringPtr nruntimesec_;
  ::google::protobuf::internal::ArenaStringPtr ncpuusage_;
  ::google::protobuf::internal::ArenaStringPtr nmemoryusage_;
  ::google::protobuf::internal::ArenaStringPtr ntotalmemorybyte_;
  ::google::protobuf::internal::ArenaStringPtr nnetworkink_;
  ::google::protobuf::internal::ArenaStringPtr nnetworkoutk_;
  ::google::protobuf::internal::ArenaStringPtr ntotalspacebyte_;
  ::google::protobuf::internal::ArenaStringPtr nfreespacebyte_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API RestGetSystemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RestGetSystemInfo) */ {
 public:
  RestGetSystemInfo();
  virtual ~RestGetSystemInfo();

  RestGetSystemInfo(const RestGetSystemInfo& from);

  inline RestGetSystemInfo& operator=(const RestGetSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestGetSystemInfo& default_instance();

  static inline const RestGetSystemInfo* internal_default_instance() {
    return reinterpret_cast<const RestGetSystemInfo*>(
               &_RestGetSystemInfo_default_instance_);
  }

  void Swap(RestGetSystemInfo* other);

  // implements Message ----------------------------------------------

  inline RestGetSystemInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RestGetSystemInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RestGetSystemInfo& from);
  void MergeFrom(const RestGetSystemInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RestGetSystemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strVersion = 1;
  void clear_strversion();
  static const int kStrVersionFieldNumber = 1;
  const ::std::string& strversion() const;
  void set_strversion(const ::std::string& value);
  #if LANG_CXX11
  void set_strversion(::std::string&& value);
  #endif
  void set_strversion(const char* value);
  void set_strversion(const char* value, size_t size);
  ::std::string* mutable_strversion();
  ::std::string* release_strversion();
  void set_allocated_strversion(::std::string* strversion);

  // string strHostId = 2;
  void clear_strhostid();
  static const int kStrHostIdFieldNumber = 2;
  const ::std::string& strhostid() const;
  void set_strhostid(const ::std::string& value);
  #if LANG_CXX11
  void set_strhostid(::std::string&& value);
  #endif
  void set_strhostid(const char* value);
  void set_strhostid(const char* value, size_t size);
  ::std::string* mutable_strhostid();
  ::std::string* release_strhostid();
  void set_allocated_strhostid(::std::string* strhostid);

  // string strLicenseType = 3;
  void clear_strlicensetype();
  static const int kStrLicenseTypeFieldNumber = 3;
  const ::std::string& strlicensetype() const;
  void set_strlicensetype(const ::std::string& value);
  #if LANG_CXX11
  void set_strlicensetype(::std::string&& value);
  #endif
  void set_strlicensetype(const char* value);
  void set_strlicensetype(const char* value, size_t size);
  ::std::string* mutable_strlicensetype();
  ::std::string* release_strlicensetype();
  void set_allocated_strlicensetype(::std::string* strlicensetype);

  // string strLicenseFull = 4;
  void clear_strlicensefull();
  static const int kStrLicenseFullFieldNumber = 4;
  const ::std::string& strlicensefull() const;
  void set_strlicensefull(const ::std::string& value);
  #if LANG_CXX11
  void set_strlicensefull(::std::string&& value);
  #endif
  void set_strlicensefull(const char* value);
  void set_strlicensefull(const char* value, size_t size);
  ::std::string* mutable_strlicensefull();
  ::std::string* release_strlicensefull();
  void set_allocated_strlicensefull(::std::string* strlicensefull);

  // string strChannelLimit = 5;
  void clear_strchannellimit();
  static const int kStrChannelLimitFieldNumber = 5;
  const ::std::string& strchannellimit() const;
  void set_strchannellimit(const ::std::string& value);
  #if LANG_CXX11
  void set_strchannellimit(::std::string&& value);
  #endif
  void set_strchannellimit(const char* value);
  void set_strchannellimit(const char* value, size_t size);
  ::std::string* mutable_strchannellimit();
  ::std::string* release_strchannellimit();
  void set_allocated_strchannellimit(::std::string* strchannellimit);

  // string strEndtime = 6;
  void clear_strendtime();
  static const int kStrEndtimeFieldNumber = 6;
  const ::std::string& strendtime() const;
  void set_strendtime(const ::std::string& value);
  #if LANG_CXX11
  void set_strendtime(::std::string&& value);
  #endif
  void set_strendtime(const char* value);
  void set_strendtime(const char* value, size_t size);
  ::std::string* mutable_strendtime();
  ::std::string* release_strendtime();
  void set_allocated_strendtime(::std::string* strendtime);

  // bool bDeviceSDK = 7;
  void clear_bdevicesdk();
  static const int kBDeviceSDKFieldNumber = 7;
  bool bdevicesdk() const;
  void set_bdevicesdk(bool value);

  // bool bDeviceSDKPb = 8;
  void clear_bdevicesdkpb();
  static const int kBDeviceSDKPbFieldNumber = 8;
  bool bdevicesdkpb() const;
  void set_bdevicesdkpb(bool value);

  // bool bGB28181 = 9;
  void clear_bgb28181();
  static const int kBGB28181FieldNumber = 9;
  bool bgb28181() const;
  void set_bgb28181(bool value);

  // bool bTranscoding = 10;
  void clear_btranscoding();
  static const int kBTranscodingFieldNumber = 10;
  bool btranscoding() const;
  void set_btranscoding(bool value);

  // bool bCluster = 11;
  void clear_bcluster();
  static const int kBClusterFieldNumber = 11;
  bool bcluster() const;
  void set_bcluster(bool value);

  // bool bPlatform = 12;
  void clear_bplatform();
  static const int kBPlatformFieldNumber = 12;
  bool bplatform() const;
  void set_bplatform(bool value);

  // bool bVideoConference = 13;
  void clear_bvideoconference();
  static const int kBVideoConferenceFieldNumber = 13;
  bool bvideoconference() const;
  void set_bvideoconference(bool value);

  // @@protoc_insertion_point(class_scope:RestGetSystemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strversion_;
  ::google::protobuf::internal::ArenaStringPtr strhostid_;
  ::google::protobuf::internal::ArenaStringPtr strlicensetype_;
  ::google::protobuf::internal::ArenaStringPtr strlicensefull_;
  ::google::protobuf::internal::ArenaStringPtr strchannellimit_;
  ::google::protobuf::internal::ArenaStringPtr strendtime_;
  bool bdevicesdk_;
  bool bdevicesdkpb_;
  bool bgb28181_;
  bool btranscoding_;
  bool bcluster_;
  bool bplatform_;
  bool bvideoconference_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API Volumes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Volumes) */ {
 public:
  Volumes();
  virtual ~Volumes();

  Volumes(const Volumes& from);

  inline Volumes& operator=(const Volumes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Volumes& default_instance();

  static inline const Volumes* internal_default_instance() {
    return reinterpret_cast<const Volumes*>(
               &_Volumes_default_instance_);
  }

  void Swap(Volumes* other);

  // implements Message ----------------------------------------------

  inline Volumes* New() const PROTOBUF_FINAL { return New(NULL); }

  Volumes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Volumes& from);
  void MergeFrom(const Volumes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Volumes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strDevice = 1;
  void clear_strdevice();
  static const int kStrDeviceFieldNumber = 1;
  const ::std::string& strdevice() const;
  void set_strdevice(const ::std::string& value);
  #if LANG_CXX11
  void set_strdevice(::std::string&& value);
  #endif
  void set_strdevice(const char* value);
  void set_strdevice(const char* value, size_t size);
  ::std::string* mutable_strdevice();
  ::std::string* release_strdevice();
  void set_allocated_strdevice(::std::string* strdevice);

  // string strPath = 2;
  void clear_strpath();
  static const int kStrPathFieldNumber = 2;
  const ::std::string& strpath() const;
  void set_strpath(const ::std::string& value);
  #if LANG_CXX11
  void set_strpath(::std::string&& value);
  #endif
  void set_strpath(const char* value);
  void set_strpath(const char* value, size_t size);
  ::std::string* mutable_strpath();
  ::std::string* release_strpath();
  void set_allocated_strpath(::std::string* strpath);

  // string bTotal = 3;
  void clear_btotal();
  static const int kBTotalFieldNumber = 3;
  const ::std::string& btotal() const;
  void set_btotal(const ::std::string& value);
  #if LANG_CXX11
  void set_btotal(::std::string&& value);
  #endif
  void set_btotal(const char* value);
  void set_btotal(const char* value, size_t size);
  ::std::string* mutable_btotal();
  ::std::string* release_btotal();
  void set_allocated_btotal(::std::string* btotal);

  // string bFree = 4;
  void clear_bfree();
  static const int kBFreeFieldNumber = 4;
  const ::std::string& bfree() const;
  void set_bfree(const ::std::string& value);
  #if LANG_CXX11
  void set_bfree(::std::string&& value);
  #endif
  void set_bfree(const char* value);
  void set_bfree(const char* value, size_t size);
  ::std::string* mutable_bfree();
  ::std::string* release_bfree();
  void set_allocated_bfree(::std::string* bfree);

  // bool bReadOnly = 5;
  void clear_breadonly();
  static const int kBReadOnlyFieldNumber = 5;
  bool breadonly() const;
  void set_breadonly(bool value);

  // @@protoc_insertion_point(class_scope:Volumes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strdevice_;
  ::google::protobuf::internal::ArenaStringPtr strpath_;
  ::google::protobuf::internal::ArenaStringPtr btotal_;
  ::google::protobuf::internal::ArenaStringPtr bfree_;
  bool breadonly_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API RestGetVolumes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RestGetVolumes) */ {
 public:
  RestGetVolumes();
  virtual ~RestGetVolumes();

  RestGetVolumes(const RestGetVolumes& from);

  inline RestGetVolumes& operator=(const RestGetVolumes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestGetVolumes& default_instance();

  static inline const RestGetVolumes* internal_default_instance() {
    return reinterpret_cast<const RestGetVolumes*>(
               &_RestGetVolumes_default_instance_);
  }

  void Swap(RestGetVolumes* other);

  // implements Message ----------------------------------------------

  inline RestGetVolumes* New() const PROTOBUF_FINAL { return New(NULL); }

  RestGetVolumes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RestGetVolumes& from);
  void MergeFrom(const RestGetVolumes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RestGetVolumes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Volumes vol = 1;
  int vol_size() const;
  void clear_vol();
  static const int kVolFieldNumber = 1;
  const ::Volumes& vol(int index) const;
  ::Volumes* mutable_vol(int index);
  ::Volumes* add_vol();
  ::google::protobuf::RepeatedPtrField< ::Volumes >*
      mutable_vol();
  const ::google::protobuf::RepeatedPtrField< ::Volumes >&
      vol() const;

  // @@protoc_insertion_point(class_scope:RestGetVolumes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Volumes > vol_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API RestKeepalive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RestKeepalive) */ {
 public:
  RestKeepalive();
  virtual ~RestKeepalive();

  RestKeepalive(const RestKeepalive& from);

  inline RestKeepalive& operator=(const RestKeepalive& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestKeepalive& default_instance();

  static inline const RestKeepalive* internal_default_instance() {
    return reinterpret_cast<const RestKeepalive*>(
               &_RestKeepalive_default_instance_);
  }

  void Swap(RestKeepalive* other);

  // implements Message ----------------------------------------------

  inline RestKeepalive* New() const PROTOBUF_FINAL { return New(NULL); }

  RestKeepalive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RestKeepalive& from);
  void MergeFrom(const RestKeepalive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RestKeepalive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strCode = 2;
  void clear_strcode();
  static const int kStrCodeFieldNumber = 2;
  const ::std::string& strcode() const;
  void set_strcode(const ::std::string& value);
  #if LANG_CXX11
  void set_strcode(::std::string&& value);
  #endif
  void set_strcode(const char* value);
  void set_strcode(const char* value, size_t size);
  ::std::string* mutable_strcode();
  ::std::string* release_strcode();
  void set_allocated_strcode(::std::string* strcode);

  // bool bStatus = 1;
  void clear_bstatus();
  static const int kBStatusFieldNumber = 1;
  bool bstatus() const;
  void set_bstatus(bool value);

  // @@protoc_insertion_point(class_scope:RestKeepalive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strcode_;
  bool bstatus_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API RestLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RestLogin) */ {
 public:
  RestLogin();
  virtual ~RestLogin();

  RestLogin(const RestLogin& from);

  inline RestLogin& operator=(const RestLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestLogin& default_instance();

  static inline const RestLogin* internal_default_instance() {
    return reinterpret_cast<const RestLogin*>(
               &_RestLogin_default_instance_);
  }

  void Swap(RestLogin* other);

  // implements Message ----------------------------------------------

  inline RestLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  RestLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RestLogin& from);
  void MergeFrom(const RestLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RestLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strSession = 2;
  void clear_strsession();
  static const int kStrSessionFieldNumber = 2;
  const ::std::string& strsession() const;
  void set_strsession(const ::std::string& value);
  #if LANG_CXX11
  void set_strsession(::std::string&& value);
  #endif
  void set_strsession(const char* value);
  void set_strsession(const char* value, size_t size);
  ::std::string* mutable_strsession();
  ::std::string* release_strsession();
  void set_allocated_strsession(::std::string* strsession);

  // bool bStatus = 1;
  void clear_bstatus();
  static const int kBStatusFieldNumber = 1;
  bool bstatus() const;
  void set_bstatus(bool value);

  // int32 nTimeout = 3;
  void clear_ntimeout();
  static const int kNTimeoutFieldNumber = 3;
  ::google::protobuf::int32 ntimeout() const;
  void set_ntimeout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RestLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strsession_;
  bool bstatus_;
  ::google::protobuf::int32 ntimeout_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API RestLogout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RestLogout) */ {
 public:
  RestLogout();
  virtual ~RestLogout();

  RestLogout(const RestLogout& from);

  inline RestLogout& operator=(const RestLogout& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestLogout& default_instance();

  static inline const RestLogout* internal_default_instance() {
    return reinterpret_cast<const RestLogout*>(
               &_RestLogout_default_instance_);
  }

  void Swap(RestLogout* other);

  // implements Message ----------------------------------------------

  inline RestLogout* New() const PROTOBUF_FINAL { return New(NULL); }

  RestLogout* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RestLogout& from);
  void MergeFrom(const RestLogout& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RestLogout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strCode = 2;
  void clear_strcode();
  static const int kStrCodeFieldNumber = 2;
  const ::std::string& strcode() const;
  void set_strcode(const ::std::string& value);
  #if LANG_CXX11
  void set_strcode(::std::string&& value);
  #endif
  void set_strcode(const char* value);
  void set_strcode(const char* value, size_t size);
  ::std::string* mutable_strcode();
  ::std::string* release_strcode();
  void set_allocated_strcode(::std::string* strcode);

  // bool bStatus = 1;
  void clear_bstatus();
  static const int kBStatusFieldNumber = 1;
  bool bstatus() const;
  void set_bstatus(bool value);

  // @@protoc_insertion_point(class_scope:RestLogout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strcode_;
  bool bstatus_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API RestUpdateUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RestUpdateUser) */ {
 public:
  RestUpdateUser();
  virtual ~RestUpdateUser();

  RestUpdateUser(const RestUpdateUser& from);

  inline RestUpdateUser& operator=(const RestUpdateUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestUpdateUser& default_instance();

  static inline const RestUpdateUser* internal_default_instance() {
    return reinterpret_cast<const RestUpdateUser*>(
               &_RestUpdateUser_default_instance_);
  }

  void Swap(RestUpdateUser* other);

  // implements Message ----------------------------------------------

  inline RestUpdateUser* New() const PROTOBUF_FINAL { return New(NULL); }

  RestUpdateUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RestUpdateUser& from);
  void MergeFrom(const RestUpdateUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RestUpdateUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strCode = 2;
  void clear_strcode();
  static const int kStrCodeFieldNumber = 2;
  const ::std::string& strcode() const;
  void set_strcode(const ::std::string& value);
  #if LANG_CXX11
  void set_strcode(::std::string&& value);
  #endif
  void set_strcode(const char* value);
  void set_strcode(const char* value, size_t size);
  ::std::string* mutable_strcode();
  ::std::string* release_strcode();
  void set_allocated_strcode(::std::string* strcode);

  // bool bStatus = 1;
  void clear_bstatus();
  static const int kBStatusFieldNumber = 1;
  bool bstatus() const;
  void set_bstatus(bool value);

  // @@protoc_insertion_point(class_scope:RestUpdateUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strcode_;
  bool bstatus_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_restsystem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RestGetCodecInfo

// int32 nCPU = 1;
inline void RestGetCodecInfo::clear_ncpu() {
  ncpu_ = 0;
}
inline ::google::protobuf::int32 RestGetCodecInfo::ncpu() const {
  // @@protoc_insertion_point(field_get:RestGetCodecInfo.nCPU)
  return ncpu_;
}
inline void RestGetCodecInfo::set_ncpu(::google::protobuf::int32 value) {
  
  ncpu_ = value;
  // @@protoc_insertion_point(field_set:RestGetCodecInfo.nCPU)
}

// int32 nCPUCore = 2;
inline void RestGetCodecInfo::clear_ncpucore() {
  ncpucore_ = 0;
}
inline ::google::protobuf::int32 RestGetCodecInfo::ncpucore() const {
  // @@protoc_insertion_point(field_get:RestGetCodecInfo.nCPUCore)
  return ncpucore_;
}
inline void RestGetCodecInfo::set_ncpucore(::google::protobuf::int32 value) {
  
  ncpucore_ = value;
  // @@protoc_insertion_point(field_set:RestGetCodecInfo.nCPUCore)
}

// string strCPUModel = 3;
inline void RestGetCodecInfo::clear_strcpumodel() {
  strcpumodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetCodecInfo::strcpumodel() const {
  // @@protoc_insertion_point(field_get:RestGetCodecInfo.strCPUModel)
  return strcpumodel_.GetNoArena();
}
inline void RestGetCodecInfo::set_strcpumodel(const ::std::string& value) {
  
  strcpumodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetCodecInfo.strCPUModel)
}
#if LANG_CXX11
inline void RestGetCodecInfo::set_strcpumodel(::std::string&& value) {
  
  strcpumodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetCodecInfo.strCPUModel)
}
#endif
inline void RestGetCodecInfo::set_strcpumodel(const char* value) {
  
  strcpumodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetCodecInfo.strCPUModel)
}
inline void RestGetCodecInfo::set_strcpumodel(const char* value, size_t size) {
  
  strcpumodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetCodecInfo.strCPUModel)
}
inline ::std::string* RestGetCodecInfo::mutable_strcpumodel() {
  
  // @@protoc_insertion_point(field_mutable:RestGetCodecInfo.strCPUModel)
  return strcpumodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetCodecInfo::release_strcpumodel() {
  // @@protoc_insertion_point(field_release:RestGetCodecInfo.strCPUModel)
  
  return strcpumodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetCodecInfo::set_allocated_strcpumodel(::std::string* strcpumodel) {
  if (strcpumodel != NULL) {
    
  } else {
    
  }
  strcpumodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcpumodel);
  // @@protoc_insertion_point(field_set_allocated:RestGetCodecInfo.strCPUModel)
}

// string strHWEncoders = 4;
inline void RestGetCodecInfo::clear_strhwencoders() {
  strhwencoders_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetCodecInfo::strhwencoders() const {
  // @@protoc_insertion_point(field_get:RestGetCodecInfo.strHWEncoders)
  return strhwencoders_.GetNoArena();
}
inline void RestGetCodecInfo::set_strhwencoders(const ::std::string& value) {
  
  strhwencoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetCodecInfo.strHWEncoders)
}
#if LANG_CXX11
inline void RestGetCodecInfo::set_strhwencoders(::std::string&& value) {
  
  strhwencoders_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetCodecInfo.strHWEncoders)
}
#endif
inline void RestGetCodecInfo::set_strhwencoders(const char* value) {
  
  strhwencoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetCodecInfo.strHWEncoders)
}
inline void RestGetCodecInfo::set_strhwencoders(const char* value, size_t size) {
  
  strhwencoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetCodecInfo.strHWEncoders)
}
inline ::std::string* RestGetCodecInfo::mutable_strhwencoders() {
  
  // @@protoc_insertion_point(field_mutable:RestGetCodecInfo.strHWEncoders)
  return strhwencoders_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetCodecInfo::release_strhwencoders() {
  // @@protoc_insertion_point(field_release:RestGetCodecInfo.strHWEncoders)
  
  return strhwencoders_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetCodecInfo::set_allocated_strhwencoders(::std::string* strhwencoders) {
  if (strhwencoders != NULL) {
    
  } else {
    
  }
  strhwencoders_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strhwencoders);
  // @@protoc_insertion_point(field_set_allocated:RestGetCodecInfo.strHWEncoders)
}

// string strHWDecoders = 5;
inline void RestGetCodecInfo::clear_strhwdecoders() {
  strhwdecoders_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetCodecInfo::strhwdecoders() const {
  // @@protoc_insertion_point(field_get:RestGetCodecInfo.strHWDecoders)
  return strhwdecoders_.GetNoArena();
}
inline void RestGetCodecInfo::set_strhwdecoders(const ::std::string& value) {
  
  strhwdecoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetCodecInfo.strHWDecoders)
}
#if LANG_CXX11
inline void RestGetCodecInfo::set_strhwdecoders(::std::string&& value) {
  
  strhwdecoders_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetCodecInfo.strHWDecoders)
}
#endif
inline void RestGetCodecInfo::set_strhwdecoders(const char* value) {
  
  strhwdecoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetCodecInfo.strHWDecoders)
}
inline void RestGetCodecInfo::set_strhwdecoders(const char* value, size_t size) {
  
  strhwdecoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetCodecInfo.strHWDecoders)
}
inline ::std::string* RestGetCodecInfo::mutable_strhwdecoders() {
  
  // @@protoc_insertion_point(field_mutable:RestGetCodecInfo.strHWDecoders)
  return strhwdecoders_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetCodecInfo::release_strhwdecoders() {
  // @@protoc_insertion_point(field_release:RestGetCodecInfo.strHWDecoders)
  
  return strhwdecoders_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetCodecInfo::set_allocated_strhwdecoders(::std::string* strhwdecoders) {
  if (strhwdecoders != NULL) {
    
  } else {
    
  }
  strhwdecoders_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strhwdecoders);
  // @@protoc_insertion_point(field_set_allocated:RestGetCodecInfo.strHWDecoders)
}

// string strSWEncoders = 6;
inline void RestGetCodecInfo::clear_strswencoders() {
  strswencoders_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetCodecInfo::strswencoders() const {
  // @@protoc_insertion_point(field_get:RestGetCodecInfo.strSWEncoders)
  return strswencoders_.GetNoArena();
}
inline void RestGetCodecInfo::set_strswencoders(const ::std::string& value) {
  
  strswencoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetCodecInfo.strSWEncoders)
}
#if LANG_CXX11
inline void RestGetCodecInfo::set_strswencoders(::std::string&& value) {
  
  strswencoders_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetCodecInfo.strSWEncoders)
}
#endif
inline void RestGetCodecInfo::set_strswencoders(const char* value) {
  
  strswencoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetCodecInfo.strSWEncoders)
}
inline void RestGetCodecInfo::set_strswencoders(const char* value, size_t size) {
  
  strswencoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetCodecInfo.strSWEncoders)
}
inline ::std::string* RestGetCodecInfo::mutable_strswencoders() {
  
  // @@protoc_insertion_point(field_mutable:RestGetCodecInfo.strSWEncoders)
  return strswencoders_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetCodecInfo::release_strswencoders() {
  // @@protoc_insertion_point(field_release:RestGetCodecInfo.strSWEncoders)
  
  return strswencoders_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetCodecInfo::set_allocated_strswencoders(::std::string* strswencoders) {
  if (strswencoders != NULL) {
    
  } else {
    
  }
  strswencoders_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strswencoders);
  // @@protoc_insertion_point(field_set_allocated:RestGetCodecInfo.strSWEncoders)
}

// string strSWDecoders = 7;
inline void RestGetCodecInfo::clear_strswdecoders() {
  strswdecoders_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetCodecInfo::strswdecoders() const {
  // @@protoc_insertion_point(field_get:RestGetCodecInfo.strSWDecoders)
  return strswdecoders_.GetNoArena();
}
inline void RestGetCodecInfo::set_strswdecoders(const ::std::string& value) {
  
  strswdecoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetCodecInfo.strSWDecoders)
}
#if LANG_CXX11
inline void RestGetCodecInfo::set_strswdecoders(::std::string&& value) {
  
  strswdecoders_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetCodecInfo.strSWDecoders)
}
#endif
inline void RestGetCodecInfo::set_strswdecoders(const char* value) {
  
  strswdecoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetCodecInfo.strSWDecoders)
}
inline void RestGetCodecInfo::set_strswdecoders(const char* value, size_t size) {
  
  strswdecoders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetCodecInfo.strSWDecoders)
}
inline ::std::string* RestGetCodecInfo::mutable_strswdecoders() {
  
  // @@protoc_insertion_point(field_mutable:RestGetCodecInfo.strSWDecoders)
  return strswdecoders_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetCodecInfo::release_strswdecoders() {
  // @@protoc_insertion_point(field_release:RestGetCodecInfo.strSWDecoders)
  
  return strswdecoders_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetCodecInfo::set_allocated_strswdecoders(::std::string* strswdecoders) {
  if (strswdecoders != NULL) {
    
  } else {
    
  }
  strswdecoders_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strswdecoders);
  // @@protoc_insertion_point(field_set_allocated:RestGetCodecInfo.strSWDecoders)
}

// -------------------------------------------------------------------

// RestGetDeviceSummary

// string nCameraTotal = 1;
inline void RestGetDeviceSummary::clear_ncameratotal() {
  ncameratotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ncameratotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nCameraTotal)
  return ncameratotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ncameratotal(const ::std::string& value) {
  
  ncameratotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nCameraTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ncameratotal(::std::string&& value) {
  
  ncameratotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nCameraTotal)
}
#endif
inline void RestGetDeviceSummary::set_ncameratotal(const char* value) {
  
  ncameratotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nCameraTotal)
}
inline void RestGetDeviceSummary::set_ncameratotal(const char* value, size_t size) {
  
  ncameratotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nCameraTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_ncameratotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nCameraTotal)
  return ncameratotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ncameratotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nCameraTotal)
  
  return ncameratotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ncameratotal(::std::string* ncameratotal) {
  if (ncameratotal != NULL) {
    
  } else {
    
  }
  ncameratotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ncameratotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nCameraTotal)
}

// string nCameraOnline = 2;
inline void RestGetDeviceSummary::clear_ncameraonline() {
  ncameraonline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ncameraonline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nCameraOnline)
  return ncameraonline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ncameraonline(const ::std::string& value) {
  
  ncameraonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nCameraOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ncameraonline(::std::string&& value) {
  
  ncameraonline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nCameraOnline)
}
#endif
inline void RestGetDeviceSummary::set_ncameraonline(const char* value) {
  
  ncameraonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nCameraOnline)
}
inline void RestGetDeviceSummary::set_ncameraonline(const char* value, size_t size) {
  
  ncameraonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nCameraOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_ncameraonline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nCameraOnline)
  return ncameraonline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ncameraonline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nCameraOnline)
  
  return ncameraonline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ncameraonline(::std::string* ncameraonline) {
  if (ncameraonline != NULL) {
    
  } else {
    
  }
  ncameraonline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ncameraonline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nCameraOnline)
}

// string nHikDevTotal = 3;
inline void RestGetDeviceSummary::clear_nhikdevtotal() {
  nhikdevtotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nhikdevtotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nHikDevTotal)
  return nhikdevtotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nhikdevtotal(const ::std::string& value) {
  
  nhikdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nHikDevTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nhikdevtotal(::std::string&& value) {
  
  nhikdevtotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nHikDevTotal)
}
#endif
inline void RestGetDeviceSummary::set_nhikdevtotal(const char* value) {
  
  nhikdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nHikDevTotal)
}
inline void RestGetDeviceSummary::set_nhikdevtotal(const char* value, size_t size) {
  
  nhikdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nHikDevTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_nhikdevtotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nHikDevTotal)
  return nhikdevtotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nhikdevtotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nHikDevTotal)
  
  return nhikdevtotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nhikdevtotal(::std::string* nhikdevtotal) {
  if (nhikdevtotal != NULL) {
    
  } else {
    
  }
  nhikdevtotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nhikdevtotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nHikDevTotal)
}

// string nHikDevOnline = 4;
inline void RestGetDeviceSummary::clear_nhikdevonline() {
  nhikdevonline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nhikdevonline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nHikDevOnline)
  return nhikdevonline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nhikdevonline(const ::std::string& value) {
  
  nhikdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nHikDevOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nhikdevonline(::std::string&& value) {
  
  nhikdevonline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nHikDevOnline)
}
#endif
inline void RestGetDeviceSummary::set_nhikdevonline(const char* value) {
  
  nhikdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nHikDevOnline)
}
inline void RestGetDeviceSummary::set_nhikdevonline(const char* value, size_t size) {
  
  nhikdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nHikDevOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_nhikdevonline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nHikDevOnline)
  return nhikdevonline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nhikdevonline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nHikDevOnline)
  
  return nhikdevonline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nhikdevonline(::std::string* nhikdevonline) {
  if (nhikdevonline != NULL) {
    
  } else {
    
  }
  nhikdevonline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nhikdevonline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nHikDevOnline)
}

// string nDhDevTotal = 5;
inline void RestGetDeviceSummary::clear_ndhdevtotal() {
  ndhdevtotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ndhdevtotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nDhDevTotal)
  return ndhdevtotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ndhdevtotal(const ::std::string& value) {
  
  ndhdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nDhDevTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ndhdevtotal(::std::string&& value) {
  
  ndhdevtotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nDhDevTotal)
}
#endif
inline void RestGetDeviceSummary::set_ndhdevtotal(const char* value) {
  
  ndhdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nDhDevTotal)
}
inline void RestGetDeviceSummary::set_ndhdevtotal(const char* value, size_t size) {
  
  ndhdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nDhDevTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_ndhdevtotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nDhDevTotal)
  return ndhdevtotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ndhdevtotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nDhDevTotal)
  
  return ndhdevtotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ndhdevtotal(::std::string* ndhdevtotal) {
  if (ndhdevtotal != NULL) {
    
  } else {
    
  }
  ndhdevtotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ndhdevtotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nDhDevTotal)
}

// string nDhDevOnline = 6;
inline void RestGetDeviceSummary::clear_ndhdevonline() {
  ndhdevonline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ndhdevonline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nDhDevOnline)
  return ndhdevonline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ndhdevonline(const ::std::string& value) {
  
  ndhdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nDhDevOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ndhdevonline(::std::string&& value) {
  
  ndhdevonline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nDhDevOnline)
}
#endif
inline void RestGetDeviceSummary::set_ndhdevonline(const char* value) {
  
  ndhdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nDhDevOnline)
}
inline void RestGetDeviceSummary::set_ndhdevonline(const char* value, size_t size) {
  
  ndhdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nDhDevOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_ndhdevonline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nDhDevOnline)
  return ndhdevonline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ndhdevonline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nDhDevOnline)
  
  return ndhdevonline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ndhdevonline(::std::string* ndhdevonline) {
  if (ndhdevonline != NULL) {
    
  } else {
    
  }
  ndhdevonline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ndhdevonline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nDhDevOnline)
}

// string nHikIscDevTotal = 7;
inline void RestGetDeviceSummary::clear_nhikiscdevtotal() {
  nhikiscdevtotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nhikiscdevtotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nHikIscDevTotal)
  return nhikiscdevtotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nhikiscdevtotal(const ::std::string& value) {
  
  nhikiscdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nHikIscDevTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nhikiscdevtotal(::std::string&& value) {
  
  nhikiscdevtotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nHikIscDevTotal)
}
#endif
inline void RestGetDeviceSummary::set_nhikiscdevtotal(const char* value) {
  
  nhikiscdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nHikIscDevTotal)
}
inline void RestGetDeviceSummary::set_nhikiscdevtotal(const char* value, size_t size) {
  
  nhikiscdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nHikIscDevTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_nhikiscdevtotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nHikIscDevTotal)
  return nhikiscdevtotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nhikiscdevtotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nHikIscDevTotal)
  
  return nhikiscdevtotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nhikiscdevtotal(::std::string* nhikiscdevtotal) {
  if (nhikiscdevtotal != NULL) {
    
  } else {
    
  }
  nhikiscdevtotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nhikiscdevtotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nHikIscDevTotal)
}

// string nHikIscDevOnline = 8;
inline void RestGetDeviceSummary::clear_nhikiscdevonline() {
  nhikiscdevonline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nhikiscdevonline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nHikIscDevOnline)
  return nhikiscdevonline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nhikiscdevonline(const ::std::string& value) {
  
  nhikiscdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nHikIscDevOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nhikiscdevonline(::std::string&& value) {
  
  nhikiscdevonline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nHikIscDevOnline)
}
#endif
inline void RestGetDeviceSummary::set_nhikiscdevonline(const char* value) {
  
  nhikiscdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nHikIscDevOnline)
}
inline void RestGetDeviceSummary::set_nhikiscdevonline(const char* value, size_t size) {
  
  nhikiscdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nHikIscDevOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_nhikiscdevonline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nHikIscDevOnline)
  return nhikiscdevonline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nhikiscdevonline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nHikIscDevOnline)
  
  return nhikiscdevonline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nhikiscdevonline(::std::string* nhikiscdevonline) {
  if (nhikiscdevonline != NULL) {
    
  } else {
    
  }
  nhikiscdevonline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nhikiscdevonline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nHikIscDevOnline)
}

// string nTdDevTotal = 9;
inline void RestGetDeviceSummary::clear_ntddevtotal() {
  ntddevtotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ntddevtotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nTdDevTotal)
  return ntddevtotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ntddevtotal(const ::std::string& value) {
  
  ntddevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nTdDevTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ntddevtotal(::std::string&& value) {
  
  ntddevtotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nTdDevTotal)
}
#endif
inline void RestGetDeviceSummary::set_ntddevtotal(const char* value) {
  
  ntddevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nTdDevTotal)
}
inline void RestGetDeviceSummary::set_ntddevtotal(const char* value, size_t size) {
  
  ntddevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nTdDevTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_ntddevtotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nTdDevTotal)
  return ntddevtotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ntddevtotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nTdDevTotal)
  
  return ntddevtotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ntddevtotal(::std::string* ntddevtotal) {
  if (ntddevtotal != NULL) {
    
  } else {
    
  }
  ntddevtotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntddevtotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nTdDevTotal)
}

// string nTdDevOnline = 10;
inline void RestGetDeviceSummary::clear_ntddevonline() {
  ntddevonline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ntddevonline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nTdDevOnline)
  return ntddevonline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ntddevonline(const ::std::string& value) {
  
  ntddevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nTdDevOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ntddevonline(::std::string&& value) {
  
  ntddevonline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nTdDevOnline)
}
#endif
inline void RestGetDeviceSummary::set_ntddevonline(const char* value) {
  
  ntddevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nTdDevOnline)
}
inline void RestGetDeviceSummary::set_ntddevonline(const char* value, size_t size) {
  
  ntddevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nTdDevOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_ntddevonline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nTdDevOnline)
  return ntddevonline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ntddevonline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nTdDevOnline)
  
  return ntddevonline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ntddevonline(::std::string* ntddevonline) {
  if (ntddevonline != NULL) {
    
  } else {
    
  }
  ntddevonline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntddevonline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nTdDevOnline)
}

// string nGbDevTotal = 11;
inline void RestGetDeviceSummary::clear_ngbdevtotal() {
  ngbdevtotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ngbdevtotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nGbDevTotal)
  return ngbdevtotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ngbdevtotal(const ::std::string& value) {
  
  ngbdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nGbDevTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ngbdevtotal(::std::string&& value) {
  
  ngbdevtotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nGbDevTotal)
}
#endif
inline void RestGetDeviceSummary::set_ngbdevtotal(const char* value) {
  
  ngbdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nGbDevTotal)
}
inline void RestGetDeviceSummary::set_ngbdevtotal(const char* value, size_t size) {
  
  ngbdevtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nGbDevTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_ngbdevtotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nGbDevTotal)
  return ngbdevtotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ngbdevtotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nGbDevTotal)
  
  return ngbdevtotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ngbdevtotal(::std::string* ngbdevtotal) {
  if (ngbdevtotal != NULL) {
    
  } else {
    
  }
  ngbdevtotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ngbdevtotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nGbDevTotal)
}

// string nGbDevOnline = 12;
inline void RestGetDeviceSummary::clear_ngbdevonline() {
  ngbdevonline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ngbdevonline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nGbDevOnline)
  return ngbdevonline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ngbdevonline(const ::std::string& value) {
  
  ngbdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nGbDevOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ngbdevonline(::std::string&& value) {
  
  ngbdevonline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nGbDevOnline)
}
#endif
inline void RestGetDeviceSummary::set_ngbdevonline(const char* value) {
  
  ngbdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nGbDevOnline)
}
inline void RestGetDeviceSummary::set_ngbdevonline(const char* value, size_t size) {
  
  ngbdevonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nGbDevOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_ngbdevonline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nGbDevOnline)
  return ngbdevonline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ngbdevonline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nGbDevOnline)
  
  return ngbdevonline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ngbdevonline(::std::string* ngbdevonline) {
  if (ngbdevonline != NULL) {
    
  } else {
    
  }
  ngbdevonline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ngbdevonline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nGbDevOnline)
}

// string nCloudTotal = 13;
inline void RestGetDeviceSummary::clear_ncloudtotal() {
  ncloudtotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ncloudtotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nCloudTotal)
  return ncloudtotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ncloudtotal(const ::std::string& value) {
  
  ncloudtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nCloudTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ncloudtotal(::std::string&& value) {
  
  ncloudtotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nCloudTotal)
}
#endif
inline void RestGetDeviceSummary::set_ncloudtotal(const char* value) {
  
  ncloudtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nCloudTotal)
}
inline void RestGetDeviceSummary::set_ncloudtotal(const char* value, size_t size) {
  
  ncloudtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nCloudTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_ncloudtotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nCloudTotal)
  return ncloudtotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ncloudtotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nCloudTotal)
  
  return ncloudtotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ncloudtotal(::std::string* ncloudtotal) {
  if (ncloudtotal != NULL) {
    
  } else {
    
  }
  ncloudtotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ncloudtotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nCloudTotal)
}

// string nCloudOnline = 14;
inline void RestGetDeviceSummary::clear_ncloudonline() {
  ncloudonline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::ncloudonline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nCloudOnline)
  return ncloudonline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_ncloudonline(const ::std::string& value) {
  
  ncloudonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nCloudOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_ncloudonline(::std::string&& value) {
  
  ncloudonline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nCloudOnline)
}
#endif
inline void RestGetDeviceSummary::set_ncloudonline(const char* value) {
  
  ncloudonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nCloudOnline)
}
inline void RestGetDeviceSummary::set_ncloudonline(const char* value, size_t size) {
  
  ncloudonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nCloudOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_ncloudonline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nCloudOnline)
  return ncloudonline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_ncloudonline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nCloudOnline)
  
  return ncloudonline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_ncloudonline(::std::string* ncloudonline) {
  if (ncloudonline != NULL) {
    
  } else {
    
  }
  ncloudonline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ncloudonline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nCloudOnline)
}

// string nRTSPRTMPTotal = 15;
inline void RestGetDeviceSummary::clear_nrtsprtmptotal() {
  nrtsprtmptotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nrtsprtmptotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nRTSPRTMPTotal)
  return nrtsprtmptotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nrtsprtmptotal(const ::std::string& value) {
  
  nrtsprtmptotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nRTSPRTMPTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nrtsprtmptotal(::std::string&& value) {
  
  nrtsprtmptotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nRTSPRTMPTotal)
}
#endif
inline void RestGetDeviceSummary::set_nrtsprtmptotal(const char* value) {
  
  nrtsprtmptotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nRTSPRTMPTotal)
}
inline void RestGetDeviceSummary::set_nrtsprtmptotal(const char* value, size_t size) {
  
  nrtsprtmptotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nRTSPRTMPTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_nrtsprtmptotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nRTSPRTMPTotal)
  return nrtsprtmptotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nrtsprtmptotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nRTSPRTMPTotal)
  
  return nrtsprtmptotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nrtsprtmptotal(::std::string* nrtsprtmptotal) {
  if (nrtsprtmptotal != NULL) {
    
  } else {
    
  }
  nrtsprtmptotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nrtsprtmptotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nRTSPRTMPTotal)
}

// string nRTSPRTMPOnline = 16;
inline void RestGetDeviceSummary::clear_nrtsprtmponline() {
  nrtsprtmponline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nrtsprtmponline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nRTSPRTMPOnline)
  return nrtsprtmponline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nrtsprtmponline(const ::std::string& value) {
  
  nrtsprtmponline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nRTSPRTMPOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nrtsprtmponline(::std::string&& value) {
  
  nrtsprtmponline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nRTSPRTMPOnline)
}
#endif
inline void RestGetDeviceSummary::set_nrtsprtmponline(const char* value) {
  
  nrtsprtmponline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nRTSPRTMPOnline)
}
inline void RestGetDeviceSummary::set_nrtsprtmponline(const char* value, size_t size) {
  
  nrtsprtmponline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nRTSPRTMPOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_nrtsprtmponline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nRTSPRTMPOnline)
  return nrtsprtmponline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nrtsprtmponline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nRTSPRTMPOnline)
  
  return nrtsprtmponline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nrtsprtmponline(::std::string* nrtsprtmponline) {
  if (nrtsprtmponline != NULL) {
    
  } else {
    
  }
  nrtsprtmponline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nrtsprtmponline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nRTSPRTMPOnline)
}

// string nONVIFTotal = 17;
inline void RestGetDeviceSummary::clear_nonviftotal() {
  nonviftotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nonviftotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nONVIFTotal)
  return nonviftotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nonviftotal(const ::std::string& value) {
  
  nonviftotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nONVIFTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nonviftotal(::std::string&& value) {
  
  nonviftotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nONVIFTotal)
}
#endif
inline void RestGetDeviceSummary::set_nonviftotal(const char* value) {
  
  nonviftotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nONVIFTotal)
}
inline void RestGetDeviceSummary::set_nonviftotal(const char* value, size_t size) {
  
  nonviftotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nONVIFTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_nonviftotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nONVIFTotal)
  return nonviftotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nonviftotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nONVIFTotal)
  
  return nonviftotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nonviftotal(::std::string* nonviftotal) {
  if (nonviftotal != NULL) {
    
  } else {
    
  }
  nonviftotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonviftotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nONVIFTotal)
}

// string nONVIFOnline = 18;
inline void RestGetDeviceSummary::clear_nonvifonline() {
  nonvifonline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nonvifonline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nONVIFOnline)
  return nonvifonline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nonvifonline(const ::std::string& value) {
  
  nonvifonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nONVIFOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nonvifonline(::std::string&& value) {
  
  nonvifonline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nONVIFOnline)
}
#endif
inline void RestGetDeviceSummary::set_nonvifonline(const char* value) {
  
  nonvifonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nONVIFOnline)
}
inline void RestGetDeviceSummary::set_nonvifonline(const char* value, size_t size) {
  
  nonvifonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nONVIFOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_nonvifonline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nONVIFOnline)
  return nonvifonline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nonvifonline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nONVIFOnline)
  
  return nonvifonline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nonvifonline(::std::string* nonvifonline) {
  if (nonvifonline != NULL) {
    
  } else {
    
  }
  nonvifonline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonvifonline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nONVIFOnline)
}

// string nRTMPPushTotal = 19;
inline void RestGetDeviceSummary::clear_nrtmppushtotal() {
  nrtmppushtotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nrtmppushtotal() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nRTMPPushTotal)
  return nrtmppushtotal_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nrtmppushtotal(const ::std::string& value) {
  
  nrtmppushtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nRTMPPushTotal)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nrtmppushtotal(::std::string&& value) {
  
  nrtmppushtotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nRTMPPushTotal)
}
#endif
inline void RestGetDeviceSummary::set_nrtmppushtotal(const char* value) {
  
  nrtmppushtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nRTMPPushTotal)
}
inline void RestGetDeviceSummary::set_nrtmppushtotal(const char* value, size_t size) {
  
  nrtmppushtotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nRTMPPushTotal)
}
inline ::std::string* RestGetDeviceSummary::mutable_nrtmppushtotal() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nRTMPPushTotal)
  return nrtmppushtotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nrtmppushtotal() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nRTMPPushTotal)
  
  return nrtmppushtotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nrtmppushtotal(::std::string* nrtmppushtotal) {
  if (nrtmppushtotal != NULL) {
    
  } else {
    
  }
  nrtmppushtotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nrtmppushtotal);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nRTMPPushTotal)
}

// string nRTMPPushOnline = 20;
inline void RestGetDeviceSummary::clear_nrtmppushonline() {
  nrtmppushonline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetDeviceSummary::nrtmppushonline() const {
  // @@protoc_insertion_point(field_get:RestGetDeviceSummary.nRTMPPushOnline)
  return nrtmppushonline_.GetNoArena();
}
inline void RestGetDeviceSummary::set_nrtmppushonline(const ::std::string& value) {
  
  nrtmppushonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetDeviceSummary.nRTMPPushOnline)
}
#if LANG_CXX11
inline void RestGetDeviceSummary::set_nrtmppushonline(::std::string&& value) {
  
  nrtmppushonline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetDeviceSummary.nRTMPPushOnline)
}
#endif
inline void RestGetDeviceSummary::set_nrtmppushonline(const char* value) {
  
  nrtmppushonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetDeviceSummary.nRTMPPushOnline)
}
inline void RestGetDeviceSummary::set_nrtmppushonline(const char* value, size_t size) {
  
  nrtmppushonline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetDeviceSummary.nRTMPPushOnline)
}
inline ::std::string* RestGetDeviceSummary::mutable_nrtmppushonline() {
  
  // @@protoc_insertion_point(field_mutable:RestGetDeviceSummary.nRTMPPushOnline)
  return nrtmppushonline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetDeviceSummary::release_nrtmppushonline() {
  // @@protoc_insertion_point(field_release:RestGetDeviceSummary.nRTMPPushOnline)
  
  return nrtmppushonline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetDeviceSummary::set_allocated_nrtmppushonline(::std::string* nrtmppushonline) {
  if (nrtmppushonline != NULL) {
    
  } else {
    
  }
  nrtmppushonline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nrtmppushonline);
  // @@protoc_insertion_point(field_set_allocated:RestGetDeviceSummary.nRTMPPushOnline)
}

// -------------------------------------------------------------------

// RestGetRunInfo

// string strRunTime = 1;
inline void RestGetRunInfo::clear_strruntime() {
  strruntime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::strruntime() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.strRunTime)
  return strruntime_.GetNoArena();
}
inline void RestGetRunInfo::set_strruntime(const ::std::string& value) {
  
  strruntime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.strRunTime)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_strruntime(::std::string&& value) {
  
  strruntime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.strRunTime)
}
#endif
inline void RestGetRunInfo::set_strruntime(const char* value) {
  
  strruntime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.strRunTime)
}
inline void RestGetRunInfo::set_strruntime(const char* value, size_t size) {
  
  strruntime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.strRunTime)
}
inline ::std::string* RestGetRunInfo::mutable_strruntime() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.strRunTime)
  return strruntime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_strruntime() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.strRunTime)
  
  return strruntime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_strruntime(::std::string* strruntime) {
  if (strruntime != NULL) {
    
  } else {
    
  }
  strruntime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strruntime);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.strRunTime)
}

// string strCPU = 2;
inline void RestGetRunInfo::clear_strcpu() {
  strcpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::strcpu() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.strCPU)
  return strcpu_.GetNoArena();
}
inline void RestGetRunInfo::set_strcpu(const ::std::string& value) {
  
  strcpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.strCPU)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_strcpu(::std::string&& value) {
  
  strcpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.strCPU)
}
#endif
inline void RestGetRunInfo::set_strcpu(const char* value) {
  
  strcpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.strCPU)
}
inline void RestGetRunInfo::set_strcpu(const char* value, size_t size) {
  
  strcpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.strCPU)
}
inline ::std::string* RestGetRunInfo::mutable_strcpu() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.strCPU)
  return strcpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_strcpu() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.strCPU)
  
  return strcpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_strcpu(::std::string* strcpu) {
  if (strcpu != NULL) {
    
  } else {
    
  }
  strcpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcpu);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.strCPU)
}

// string strMemory = 3;
inline void RestGetRunInfo::clear_strmemory() {
  strmemory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::strmemory() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.strMemory)
  return strmemory_.GetNoArena();
}
inline void RestGetRunInfo::set_strmemory(const ::std::string& value) {
  
  strmemory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.strMemory)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_strmemory(::std::string&& value) {
  
  strmemory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.strMemory)
}
#endif
inline void RestGetRunInfo::set_strmemory(const char* value) {
  
  strmemory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.strMemory)
}
inline void RestGetRunInfo::set_strmemory(const char* value, size_t size) {
  
  strmemory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.strMemory)
}
inline ::std::string* RestGetRunInfo::mutable_strmemory() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.strMemory)
  return strmemory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_strmemory() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.strMemory)
  
  return strmemory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_strmemory(::std::string* strmemory) {
  if (strmemory != NULL) {
    
  } else {
    
  }
  strmemory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmemory);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.strMemory)
}

// string strNetworkIn = 4;
inline void RestGetRunInfo::clear_strnetworkin() {
  strnetworkin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::strnetworkin() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.strNetworkIn)
  return strnetworkin_.GetNoArena();
}
inline void RestGetRunInfo::set_strnetworkin(const ::std::string& value) {
  
  strnetworkin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.strNetworkIn)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_strnetworkin(::std::string&& value) {
  
  strnetworkin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.strNetworkIn)
}
#endif
inline void RestGetRunInfo::set_strnetworkin(const char* value) {
  
  strnetworkin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.strNetworkIn)
}
inline void RestGetRunInfo::set_strnetworkin(const char* value, size_t size) {
  
  strnetworkin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.strNetworkIn)
}
inline ::std::string* RestGetRunInfo::mutable_strnetworkin() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.strNetworkIn)
  return strnetworkin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_strnetworkin() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.strNetworkIn)
  
  return strnetworkin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_strnetworkin(::std::string* strnetworkin) {
  if (strnetworkin != NULL) {
    
  } else {
    
  }
  strnetworkin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strnetworkin);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.strNetworkIn)
}

// string strNetworkOut = 5;
inline void RestGetRunInfo::clear_strnetworkout() {
  strnetworkout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::strnetworkout() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.strNetworkOut)
  return strnetworkout_.GetNoArena();
}
inline void RestGetRunInfo::set_strnetworkout(const ::std::string& value) {
  
  strnetworkout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.strNetworkOut)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_strnetworkout(::std::string&& value) {
  
  strnetworkout_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.strNetworkOut)
}
#endif
inline void RestGetRunInfo::set_strnetworkout(const char* value) {
  
  strnetworkout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.strNetworkOut)
}
inline void RestGetRunInfo::set_strnetworkout(const char* value, size_t size) {
  
  strnetworkout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.strNetworkOut)
}
inline ::std::string* RestGetRunInfo::mutable_strnetworkout() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.strNetworkOut)
  return strnetworkout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_strnetworkout() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.strNetworkOut)
  
  return strnetworkout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_strnetworkout(::std::string* strnetworkout) {
  if (strnetworkout != NULL) {
    
  } else {
    
  }
  strnetworkout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strnetworkout);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.strNetworkOut)
}

// string strTotalSpace = 6;
inline void RestGetRunInfo::clear_strtotalspace() {
  strtotalspace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::strtotalspace() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.strTotalSpace)
  return strtotalspace_.GetNoArena();
}
inline void RestGetRunInfo::set_strtotalspace(const ::std::string& value) {
  
  strtotalspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.strTotalSpace)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_strtotalspace(::std::string&& value) {
  
  strtotalspace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.strTotalSpace)
}
#endif
inline void RestGetRunInfo::set_strtotalspace(const char* value) {
  
  strtotalspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.strTotalSpace)
}
inline void RestGetRunInfo::set_strtotalspace(const char* value, size_t size) {
  
  strtotalspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.strTotalSpace)
}
inline ::std::string* RestGetRunInfo::mutable_strtotalspace() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.strTotalSpace)
  return strtotalspace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_strtotalspace() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.strTotalSpace)
  
  return strtotalspace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_strtotalspace(::std::string* strtotalspace) {
  if (strtotalspace != NULL) {
    
  } else {
    
  }
  strtotalspace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtotalspace);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.strTotalSpace)
}

// string strFreeSpace = 7;
inline void RestGetRunInfo::clear_strfreespace() {
  strfreespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::strfreespace() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.strFreeSpace)
  return strfreespace_.GetNoArena();
}
inline void RestGetRunInfo::set_strfreespace(const ::std::string& value) {
  
  strfreespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.strFreeSpace)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_strfreespace(::std::string&& value) {
  
  strfreespace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.strFreeSpace)
}
#endif
inline void RestGetRunInfo::set_strfreespace(const char* value) {
  
  strfreespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.strFreeSpace)
}
inline void RestGetRunInfo::set_strfreespace(const char* value, size_t size) {
  
  strfreespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.strFreeSpace)
}
inline ::std::string* RestGetRunInfo::mutable_strfreespace() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.strFreeSpace)
  return strfreespace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_strfreespace() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.strFreeSpace)
  
  return strfreespace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_strfreespace(::std::string* strfreespace) {
  if (strfreespace != NULL) {
    
  } else {
    
  }
  strfreespace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfreespace);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.strFreeSpace)
}

// string nRunTimeSec = 8;
inline void RestGetRunInfo::clear_nruntimesec() {
  nruntimesec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::nruntimesec() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.nRunTimeSec)
  return nruntimesec_.GetNoArena();
}
inline void RestGetRunInfo::set_nruntimesec(const ::std::string& value) {
  
  nruntimesec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.nRunTimeSec)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_nruntimesec(::std::string&& value) {
  
  nruntimesec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.nRunTimeSec)
}
#endif
inline void RestGetRunInfo::set_nruntimesec(const char* value) {
  
  nruntimesec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.nRunTimeSec)
}
inline void RestGetRunInfo::set_nruntimesec(const char* value, size_t size) {
  
  nruntimesec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.nRunTimeSec)
}
inline ::std::string* RestGetRunInfo::mutable_nruntimesec() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.nRunTimeSec)
  return nruntimesec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_nruntimesec() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.nRunTimeSec)
  
  return nruntimesec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_nruntimesec(::std::string* nruntimesec) {
  if (nruntimesec != NULL) {
    
  } else {
    
  }
  nruntimesec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nruntimesec);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.nRunTimeSec)
}

// string nCPUUsage = 9;
inline void RestGetRunInfo::clear_ncpuusage() {
  ncpuusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::ncpuusage() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.nCPUUsage)
  return ncpuusage_.GetNoArena();
}
inline void RestGetRunInfo::set_ncpuusage(const ::std::string& value) {
  
  ncpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.nCPUUsage)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_ncpuusage(::std::string&& value) {
  
  ncpuusage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.nCPUUsage)
}
#endif
inline void RestGetRunInfo::set_ncpuusage(const char* value) {
  
  ncpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.nCPUUsage)
}
inline void RestGetRunInfo::set_ncpuusage(const char* value, size_t size) {
  
  ncpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.nCPUUsage)
}
inline ::std::string* RestGetRunInfo::mutable_ncpuusage() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.nCPUUsage)
  return ncpuusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_ncpuusage() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.nCPUUsage)
  
  return ncpuusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_ncpuusage(::std::string* ncpuusage) {
  if (ncpuusage != NULL) {
    
  } else {
    
  }
  ncpuusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ncpuusage);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.nCPUUsage)
}

// string nMemoryUsage = 10;
inline void RestGetRunInfo::clear_nmemoryusage() {
  nmemoryusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::nmemoryusage() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.nMemoryUsage)
  return nmemoryusage_.GetNoArena();
}
inline void RestGetRunInfo::set_nmemoryusage(const ::std::string& value) {
  
  nmemoryusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.nMemoryUsage)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_nmemoryusage(::std::string&& value) {
  
  nmemoryusage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.nMemoryUsage)
}
#endif
inline void RestGetRunInfo::set_nmemoryusage(const char* value) {
  
  nmemoryusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.nMemoryUsage)
}
inline void RestGetRunInfo::set_nmemoryusage(const char* value, size_t size) {
  
  nmemoryusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.nMemoryUsage)
}
inline ::std::string* RestGetRunInfo::mutable_nmemoryusage() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.nMemoryUsage)
  return nmemoryusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_nmemoryusage() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.nMemoryUsage)
  
  return nmemoryusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_nmemoryusage(::std::string* nmemoryusage) {
  if (nmemoryusage != NULL) {
    
  } else {
    
  }
  nmemoryusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nmemoryusage);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.nMemoryUsage)
}

// string nTotalMemoryByte = 11;
inline void RestGetRunInfo::clear_ntotalmemorybyte() {
  ntotalmemorybyte_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::ntotalmemorybyte() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.nTotalMemoryByte)
  return ntotalmemorybyte_.GetNoArena();
}
inline void RestGetRunInfo::set_ntotalmemorybyte(const ::std::string& value) {
  
  ntotalmemorybyte_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.nTotalMemoryByte)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_ntotalmemorybyte(::std::string&& value) {
  
  ntotalmemorybyte_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.nTotalMemoryByte)
}
#endif
inline void RestGetRunInfo::set_ntotalmemorybyte(const char* value) {
  
  ntotalmemorybyte_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.nTotalMemoryByte)
}
inline void RestGetRunInfo::set_ntotalmemorybyte(const char* value, size_t size) {
  
  ntotalmemorybyte_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.nTotalMemoryByte)
}
inline ::std::string* RestGetRunInfo::mutable_ntotalmemorybyte() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.nTotalMemoryByte)
  return ntotalmemorybyte_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_ntotalmemorybyte() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.nTotalMemoryByte)
  
  return ntotalmemorybyte_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_ntotalmemorybyte(::std::string* ntotalmemorybyte) {
  if (ntotalmemorybyte != NULL) {
    
  } else {
    
  }
  ntotalmemorybyte_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntotalmemorybyte);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.nTotalMemoryByte)
}

// string nNetworkInK = 12;
inline void RestGetRunInfo::clear_nnetworkink() {
  nnetworkink_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::nnetworkink() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.nNetworkInK)
  return nnetworkink_.GetNoArena();
}
inline void RestGetRunInfo::set_nnetworkink(const ::std::string& value) {
  
  nnetworkink_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.nNetworkInK)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_nnetworkink(::std::string&& value) {
  
  nnetworkink_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.nNetworkInK)
}
#endif
inline void RestGetRunInfo::set_nnetworkink(const char* value) {
  
  nnetworkink_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.nNetworkInK)
}
inline void RestGetRunInfo::set_nnetworkink(const char* value, size_t size) {
  
  nnetworkink_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.nNetworkInK)
}
inline ::std::string* RestGetRunInfo::mutable_nnetworkink() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.nNetworkInK)
  return nnetworkink_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_nnetworkink() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.nNetworkInK)
  
  return nnetworkink_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_nnetworkink(::std::string* nnetworkink) {
  if (nnetworkink != NULL) {
    
  } else {
    
  }
  nnetworkink_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nnetworkink);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.nNetworkInK)
}

// string nNetworkOutK = 13;
inline void RestGetRunInfo::clear_nnetworkoutk() {
  nnetworkoutk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::nnetworkoutk() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.nNetworkOutK)
  return nnetworkoutk_.GetNoArena();
}
inline void RestGetRunInfo::set_nnetworkoutk(const ::std::string& value) {
  
  nnetworkoutk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.nNetworkOutK)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_nnetworkoutk(::std::string&& value) {
  
  nnetworkoutk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.nNetworkOutK)
}
#endif
inline void RestGetRunInfo::set_nnetworkoutk(const char* value) {
  
  nnetworkoutk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.nNetworkOutK)
}
inline void RestGetRunInfo::set_nnetworkoutk(const char* value, size_t size) {
  
  nnetworkoutk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.nNetworkOutK)
}
inline ::std::string* RestGetRunInfo::mutable_nnetworkoutk() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.nNetworkOutK)
  return nnetworkoutk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_nnetworkoutk() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.nNetworkOutK)
  
  return nnetworkoutk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_nnetworkoutk(::std::string* nnetworkoutk) {
  if (nnetworkoutk != NULL) {
    
  } else {
    
  }
  nnetworkoutk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nnetworkoutk);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.nNetworkOutK)
}

// string nTotalSpaceByte = 14;
inline void RestGetRunInfo::clear_ntotalspacebyte() {
  ntotalspacebyte_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::ntotalspacebyte() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.nTotalSpaceByte)
  return ntotalspacebyte_.GetNoArena();
}
inline void RestGetRunInfo::set_ntotalspacebyte(const ::std::string& value) {
  
  ntotalspacebyte_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.nTotalSpaceByte)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_ntotalspacebyte(::std::string&& value) {
  
  ntotalspacebyte_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.nTotalSpaceByte)
}
#endif
inline void RestGetRunInfo::set_ntotalspacebyte(const char* value) {
  
  ntotalspacebyte_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.nTotalSpaceByte)
}
inline void RestGetRunInfo::set_ntotalspacebyte(const char* value, size_t size) {
  
  ntotalspacebyte_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.nTotalSpaceByte)
}
inline ::std::string* RestGetRunInfo::mutable_ntotalspacebyte() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.nTotalSpaceByte)
  return ntotalspacebyte_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_ntotalspacebyte() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.nTotalSpaceByte)
  
  return ntotalspacebyte_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_ntotalspacebyte(::std::string* ntotalspacebyte) {
  if (ntotalspacebyte != NULL) {
    
  } else {
    
  }
  ntotalspacebyte_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntotalspacebyte);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.nTotalSpaceByte)
}

// string nFreeSpaceByte = 15;
inline void RestGetRunInfo::clear_nfreespacebyte() {
  nfreespacebyte_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetRunInfo::nfreespacebyte() const {
  // @@protoc_insertion_point(field_get:RestGetRunInfo.nFreeSpaceByte)
  return nfreespacebyte_.GetNoArena();
}
inline void RestGetRunInfo::set_nfreespacebyte(const ::std::string& value) {
  
  nfreespacebyte_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetRunInfo.nFreeSpaceByte)
}
#if LANG_CXX11
inline void RestGetRunInfo::set_nfreespacebyte(::std::string&& value) {
  
  nfreespacebyte_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetRunInfo.nFreeSpaceByte)
}
#endif
inline void RestGetRunInfo::set_nfreespacebyte(const char* value) {
  
  nfreespacebyte_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetRunInfo.nFreeSpaceByte)
}
inline void RestGetRunInfo::set_nfreespacebyte(const char* value, size_t size) {
  
  nfreespacebyte_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetRunInfo.nFreeSpaceByte)
}
inline ::std::string* RestGetRunInfo::mutable_nfreespacebyte() {
  
  // @@protoc_insertion_point(field_mutable:RestGetRunInfo.nFreeSpaceByte)
  return nfreespacebyte_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetRunInfo::release_nfreespacebyte() {
  // @@protoc_insertion_point(field_release:RestGetRunInfo.nFreeSpaceByte)
  
  return nfreespacebyte_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetRunInfo::set_allocated_nfreespacebyte(::std::string* nfreespacebyte) {
  if (nfreespacebyte != NULL) {
    
  } else {
    
  }
  nfreespacebyte_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nfreespacebyte);
  // @@protoc_insertion_point(field_set_allocated:RestGetRunInfo.nFreeSpaceByte)
}

// -------------------------------------------------------------------

// RestGetSystemInfo

// string strVersion = 1;
inline void RestGetSystemInfo::clear_strversion() {
  strversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetSystemInfo::strversion() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.strVersion)
  return strversion_.GetNoArena();
}
inline void RestGetSystemInfo::set_strversion(const ::std::string& value) {
  
  strversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.strVersion)
}
#if LANG_CXX11
inline void RestGetSystemInfo::set_strversion(::std::string&& value) {
  
  strversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetSystemInfo.strVersion)
}
#endif
inline void RestGetSystemInfo::set_strversion(const char* value) {
  
  strversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetSystemInfo.strVersion)
}
inline void RestGetSystemInfo::set_strversion(const char* value, size_t size) {
  
  strversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetSystemInfo.strVersion)
}
inline ::std::string* RestGetSystemInfo::mutable_strversion() {
  
  // @@protoc_insertion_point(field_mutable:RestGetSystemInfo.strVersion)
  return strversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetSystemInfo::release_strversion() {
  // @@protoc_insertion_point(field_release:RestGetSystemInfo.strVersion)
  
  return strversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetSystemInfo::set_allocated_strversion(::std::string* strversion) {
  if (strversion != NULL) {
    
  } else {
    
  }
  strversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strversion);
  // @@protoc_insertion_point(field_set_allocated:RestGetSystemInfo.strVersion)
}

// string strHostId = 2;
inline void RestGetSystemInfo::clear_strhostid() {
  strhostid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetSystemInfo::strhostid() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.strHostId)
  return strhostid_.GetNoArena();
}
inline void RestGetSystemInfo::set_strhostid(const ::std::string& value) {
  
  strhostid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.strHostId)
}
#if LANG_CXX11
inline void RestGetSystemInfo::set_strhostid(::std::string&& value) {
  
  strhostid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetSystemInfo.strHostId)
}
#endif
inline void RestGetSystemInfo::set_strhostid(const char* value) {
  
  strhostid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetSystemInfo.strHostId)
}
inline void RestGetSystemInfo::set_strhostid(const char* value, size_t size) {
  
  strhostid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetSystemInfo.strHostId)
}
inline ::std::string* RestGetSystemInfo::mutable_strhostid() {
  
  // @@protoc_insertion_point(field_mutable:RestGetSystemInfo.strHostId)
  return strhostid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetSystemInfo::release_strhostid() {
  // @@protoc_insertion_point(field_release:RestGetSystemInfo.strHostId)
  
  return strhostid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetSystemInfo::set_allocated_strhostid(::std::string* strhostid) {
  if (strhostid != NULL) {
    
  } else {
    
  }
  strhostid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strhostid);
  // @@protoc_insertion_point(field_set_allocated:RestGetSystemInfo.strHostId)
}

// string strLicenseType = 3;
inline void RestGetSystemInfo::clear_strlicensetype() {
  strlicensetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetSystemInfo::strlicensetype() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.strLicenseType)
  return strlicensetype_.GetNoArena();
}
inline void RestGetSystemInfo::set_strlicensetype(const ::std::string& value) {
  
  strlicensetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.strLicenseType)
}
#if LANG_CXX11
inline void RestGetSystemInfo::set_strlicensetype(::std::string&& value) {
  
  strlicensetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetSystemInfo.strLicenseType)
}
#endif
inline void RestGetSystemInfo::set_strlicensetype(const char* value) {
  
  strlicensetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetSystemInfo.strLicenseType)
}
inline void RestGetSystemInfo::set_strlicensetype(const char* value, size_t size) {
  
  strlicensetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetSystemInfo.strLicenseType)
}
inline ::std::string* RestGetSystemInfo::mutable_strlicensetype() {
  
  // @@protoc_insertion_point(field_mutable:RestGetSystemInfo.strLicenseType)
  return strlicensetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetSystemInfo::release_strlicensetype() {
  // @@protoc_insertion_point(field_release:RestGetSystemInfo.strLicenseType)
  
  return strlicensetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetSystemInfo::set_allocated_strlicensetype(::std::string* strlicensetype) {
  if (strlicensetype != NULL) {
    
  } else {
    
  }
  strlicensetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strlicensetype);
  // @@protoc_insertion_point(field_set_allocated:RestGetSystemInfo.strLicenseType)
}

// string strLicenseFull = 4;
inline void RestGetSystemInfo::clear_strlicensefull() {
  strlicensefull_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetSystemInfo::strlicensefull() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.strLicenseFull)
  return strlicensefull_.GetNoArena();
}
inline void RestGetSystemInfo::set_strlicensefull(const ::std::string& value) {
  
  strlicensefull_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.strLicenseFull)
}
#if LANG_CXX11
inline void RestGetSystemInfo::set_strlicensefull(::std::string&& value) {
  
  strlicensefull_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetSystemInfo.strLicenseFull)
}
#endif
inline void RestGetSystemInfo::set_strlicensefull(const char* value) {
  
  strlicensefull_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetSystemInfo.strLicenseFull)
}
inline void RestGetSystemInfo::set_strlicensefull(const char* value, size_t size) {
  
  strlicensefull_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetSystemInfo.strLicenseFull)
}
inline ::std::string* RestGetSystemInfo::mutable_strlicensefull() {
  
  // @@protoc_insertion_point(field_mutable:RestGetSystemInfo.strLicenseFull)
  return strlicensefull_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetSystemInfo::release_strlicensefull() {
  // @@protoc_insertion_point(field_release:RestGetSystemInfo.strLicenseFull)
  
  return strlicensefull_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetSystemInfo::set_allocated_strlicensefull(::std::string* strlicensefull) {
  if (strlicensefull != NULL) {
    
  } else {
    
  }
  strlicensefull_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strlicensefull);
  // @@protoc_insertion_point(field_set_allocated:RestGetSystemInfo.strLicenseFull)
}

// string strChannelLimit = 5;
inline void RestGetSystemInfo::clear_strchannellimit() {
  strchannellimit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetSystemInfo::strchannellimit() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.strChannelLimit)
  return strchannellimit_.GetNoArena();
}
inline void RestGetSystemInfo::set_strchannellimit(const ::std::string& value) {
  
  strchannellimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.strChannelLimit)
}
#if LANG_CXX11
inline void RestGetSystemInfo::set_strchannellimit(::std::string&& value) {
  
  strchannellimit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetSystemInfo.strChannelLimit)
}
#endif
inline void RestGetSystemInfo::set_strchannellimit(const char* value) {
  
  strchannellimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetSystemInfo.strChannelLimit)
}
inline void RestGetSystemInfo::set_strchannellimit(const char* value, size_t size) {
  
  strchannellimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetSystemInfo.strChannelLimit)
}
inline ::std::string* RestGetSystemInfo::mutable_strchannellimit() {
  
  // @@protoc_insertion_point(field_mutable:RestGetSystemInfo.strChannelLimit)
  return strchannellimit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetSystemInfo::release_strchannellimit() {
  // @@protoc_insertion_point(field_release:RestGetSystemInfo.strChannelLimit)
  
  return strchannellimit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetSystemInfo::set_allocated_strchannellimit(::std::string* strchannellimit) {
  if (strchannellimit != NULL) {
    
  } else {
    
  }
  strchannellimit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strchannellimit);
  // @@protoc_insertion_point(field_set_allocated:RestGetSystemInfo.strChannelLimit)
}

// string strEndtime = 6;
inline void RestGetSystemInfo::clear_strendtime() {
  strendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestGetSystemInfo::strendtime() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.strEndtime)
  return strendtime_.GetNoArena();
}
inline void RestGetSystemInfo::set_strendtime(const ::std::string& value) {
  
  strendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.strEndtime)
}
#if LANG_CXX11
inline void RestGetSystemInfo::set_strendtime(::std::string&& value) {
  
  strendtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestGetSystemInfo.strEndtime)
}
#endif
inline void RestGetSystemInfo::set_strendtime(const char* value) {
  
  strendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestGetSystemInfo.strEndtime)
}
inline void RestGetSystemInfo::set_strendtime(const char* value, size_t size) {
  
  strendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestGetSystemInfo.strEndtime)
}
inline ::std::string* RestGetSystemInfo::mutable_strendtime() {
  
  // @@protoc_insertion_point(field_mutable:RestGetSystemInfo.strEndtime)
  return strendtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestGetSystemInfo::release_strendtime() {
  // @@protoc_insertion_point(field_release:RestGetSystemInfo.strEndtime)
  
  return strendtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestGetSystemInfo::set_allocated_strendtime(::std::string* strendtime) {
  if (strendtime != NULL) {
    
  } else {
    
  }
  strendtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strendtime);
  // @@protoc_insertion_point(field_set_allocated:RestGetSystemInfo.strEndtime)
}

// bool bDeviceSDK = 7;
inline void RestGetSystemInfo::clear_bdevicesdk() {
  bdevicesdk_ = false;
}
inline bool RestGetSystemInfo::bdevicesdk() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.bDeviceSDK)
  return bdevicesdk_;
}
inline void RestGetSystemInfo::set_bdevicesdk(bool value) {
  
  bdevicesdk_ = value;
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.bDeviceSDK)
}

// bool bDeviceSDKPb = 8;
inline void RestGetSystemInfo::clear_bdevicesdkpb() {
  bdevicesdkpb_ = false;
}
inline bool RestGetSystemInfo::bdevicesdkpb() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.bDeviceSDKPb)
  return bdevicesdkpb_;
}
inline void RestGetSystemInfo::set_bdevicesdkpb(bool value) {
  
  bdevicesdkpb_ = value;
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.bDeviceSDKPb)
}

// bool bGB28181 = 9;
inline void RestGetSystemInfo::clear_bgb28181() {
  bgb28181_ = false;
}
inline bool RestGetSystemInfo::bgb28181() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.bGB28181)
  return bgb28181_;
}
inline void RestGetSystemInfo::set_bgb28181(bool value) {
  
  bgb28181_ = value;
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.bGB28181)
}

// bool bTranscoding = 10;
inline void RestGetSystemInfo::clear_btranscoding() {
  btranscoding_ = false;
}
inline bool RestGetSystemInfo::btranscoding() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.bTranscoding)
  return btranscoding_;
}
inline void RestGetSystemInfo::set_btranscoding(bool value) {
  
  btranscoding_ = value;
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.bTranscoding)
}

// bool bCluster = 11;
inline void RestGetSystemInfo::clear_bcluster() {
  bcluster_ = false;
}
inline bool RestGetSystemInfo::bcluster() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.bCluster)
  return bcluster_;
}
inline void RestGetSystemInfo::set_bcluster(bool value) {
  
  bcluster_ = value;
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.bCluster)
}

// bool bPlatform = 12;
inline void RestGetSystemInfo::clear_bplatform() {
  bplatform_ = false;
}
inline bool RestGetSystemInfo::bplatform() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.bPlatform)
  return bplatform_;
}
inline void RestGetSystemInfo::set_bplatform(bool value) {
  
  bplatform_ = value;
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.bPlatform)
}

// bool bVideoConference = 13;
inline void RestGetSystemInfo::clear_bvideoconference() {
  bvideoconference_ = false;
}
inline bool RestGetSystemInfo::bvideoconference() const {
  // @@protoc_insertion_point(field_get:RestGetSystemInfo.bVideoConference)
  return bvideoconference_;
}
inline void RestGetSystemInfo::set_bvideoconference(bool value) {
  
  bvideoconference_ = value;
  // @@protoc_insertion_point(field_set:RestGetSystemInfo.bVideoConference)
}

// -------------------------------------------------------------------

// Volumes

// string strDevice = 1;
inline void Volumes::clear_strdevice() {
  strdevice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Volumes::strdevice() const {
  // @@protoc_insertion_point(field_get:Volumes.strDevice)
  return strdevice_.GetNoArena();
}
inline void Volumes::set_strdevice(const ::std::string& value) {
  
  strdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Volumes.strDevice)
}
#if LANG_CXX11
inline void Volumes::set_strdevice(::std::string&& value) {
  
  strdevice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Volumes.strDevice)
}
#endif
inline void Volumes::set_strdevice(const char* value) {
  
  strdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Volumes.strDevice)
}
inline void Volumes::set_strdevice(const char* value, size_t size) {
  
  strdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Volumes.strDevice)
}
inline ::std::string* Volumes::mutable_strdevice() {
  
  // @@protoc_insertion_point(field_mutable:Volumes.strDevice)
  return strdevice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Volumes::release_strdevice() {
  // @@protoc_insertion_point(field_release:Volumes.strDevice)
  
  return strdevice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volumes::set_allocated_strdevice(::std::string* strdevice) {
  if (strdevice != NULL) {
    
  } else {
    
  }
  strdevice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdevice);
  // @@protoc_insertion_point(field_set_allocated:Volumes.strDevice)
}

// string strPath = 2;
inline void Volumes::clear_strpath() {
  strpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Volumes::strpath() const {
  // @@protoc_insertion_point(field_get:Volumes.strPath)
  return strpath_.GetNoArena();
}
inline void Volumes::set_strpath(const ::std::string& value) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Volumes.strPath)
}
#if LANG_CXX11
inline void Volumes::set_strpath(::std::string&& value) {
  
  strpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Volumes.strPath)
}
#endif
inline void Volumes::set_strpath(const char* value) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Volumes.strPath)
}
inline void Volumes::set_strpath(const char* value, size_t size) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Volumes.strPath)
}
inline ::std::string* Volumes::mutable_strpath() {
  
  // @@protoc_insertion_point(field_mutable:Volumes.strPath)
  return strpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Volumes::release_strpath() {
  // @@protoc_insertion_point(field_release:Volumes.strPath)
  
  return strpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volumes::set_allocated_strpath(::std::string* strpath) {
  if (strpath != NULL) {
    
  } else {
    
  }
  strpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpath);
  // @@protoc_insertion_point(field_set_allocated:Volumes.strPath)
}

// string bTotal = 3;
inline void Volumes::clear_btotal() {
  btotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Volumes::btotal() const {
  // @@protoc_insertion_point(field_get:Volumes.bTotal)
  return btotal_.GetNoArena();
}
inline void Volumes::set_btotal(const ::std::string& value) {
  
  btotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Volumes.bTotal)
}
#if LANG_CXX11
inline void Volumes::set_btotal(::std::string&& value) {
  
  btotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Volumes.bTotal)
}
#endif
inline void Volumes::set_btotal(const char* value) {
  
  btotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Volumes.bTotal)
}
inline void Volumes::set_btotal(const char* value, size_t size) {
  
  btotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Volumes.bTotal)
}
inline ::std::string* Volumes::mutable_btotal() {
  
  // @@protoc_insertion_point(field_mutable:Volumes.bTotal)
  return btotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Volumes::release_btotal() {
  // @@protoc_insertion_point(field_release:Volumes.bTotal)
  
  return btotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volumes::set_allocated_btotal(::std::string* btotal) {
  if (btotal != NULL) {
    
  } else {
    
  }
  btotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), btotal);
  // @@protoc_insertion_point(field_set_allocated:Volumes.bTotal)
}

// string bFree = 4;
inline void Volumes::clear_bfree() {
  bfree_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Volumes::bfree() const {
  // @@protoc_insertion_point(field_get:Volumes.bFree)
  return bfree_.GetNoArena();
}
inline void Volumes::set_bfree(const ::std::string& value) {
  
  bfree_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Volumes.bFree)
}
#if LANG_CXX11
inline void Volumes::set_bfree(::std::string&& value) {
  
  bfree_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Volumes.bFree)
}
#endif
inline void Volumes::set_bfree(const char* value) {
  
  bfree_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Volumes.bFree)
}
inline void Volumes::set_bfree(const char* value, size_t size) {
  
  bfree_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Volumes.bFree)
}
inline ::std::string* Volumes::mutable_bfree() {
  
  // @@protoc_insertion_point(field_mutable:Volumes.bFree)
  return bfree_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Volumes::release_bfree() {
  // @@protoc_insertion_point(field_release:Volumes.bFree)
  
  return bfree_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Volumes::set_allocated_bfree(::std::string* bfree) {
  if (bfree != NULL) {
    
  } else {
    
  }
  bfree_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bfree);
  // @@protoc_insertion_point(field_set_allocated:Volumes.bFree)
}

// bool bReadOnly = 5;
inline void Volumes::clear_breadonly() {
  breadonly_ = false;
}
inline bool Volumes::breadonly() const {
  // @@protoc_insertion_point(field_get:Volumes.bReadOnly)
  return breadonly_;
}
inline void Volumes::set_breadonly(bool value) {
  
  breadonly_ = value;
  // @@protoc_insertion_point(field_set:Volumes.bReadOnly)
}

// -------------------------------------------------------------------

// RestGetVolumes

// repeated .Volumes vol = 1;
inline int RestGetVolumes::vol_size() const {
  return vol_.size();
}
inline void RestGetVolumes::clear_vol() {
  vol_.Clear();
}
inline const ::Volumes& RestGetVolumes::vol(int index) const {
  // @@protoc_insertion_point(field_get:RestGetVolumes.vol)
  return vol_.Get(index);
}
inline ::Volumes* RestGetVolumes::mutable_vol(int index) {
  // @@protoc_insertion_point(field_mutable:RestGetVolumes.vol)
  return vol_.Mutable(index);
}
inline ::Volumes* RestGetVolumes::add_vol() {
  // @@protoc_insertion_point(field_add:RestGetVolumes.vol)
  return vol_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Volumes >*
RestGetVolumes::mutable_vol() {
  // @@protoc_insertion_point(field_mutable_list:RestGetVolumes.vol)
  return &vol_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Volumes >&
RestGetVolumes::vol() const {
  // @@protoc_insertion_point(field_list:RestGetVolumes.vol)
  return vol_;
}

// -------------------------------------------------------------------

// RestKeepalive

// bool bStatus = 1;
inline void RestKeepalive::clear_bstatus() {
  bstatus_ = false;
}
inline bool RestKeepalive::bstatus() const {
  // @@protoc_insertion_point(field_get:RestKeepalive.bStatus)
  return bstatus_;
}
inline void RestKeepalive::set_bstatus(bool value) {
  
  bstatus_ = value;
  // @@protoc_insertion_point(field_set:RestKeepalive.bStatus)
}

// string strCode = 2;
inline void RestKeepalive::clear_strcode() {
  strcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestKeepalive::strcode() const {
  // @@protoc_insertion_point(field_get:RestKeepalive.strCode)
  return strcode_.GetNoArena();
}
inline void RestKeepalive::set_strcode(const ::std::string& value) {
  
  strcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestKeepalive.strCode)
}
#if LANG_CXX11
inline void RestKeepalive::set_strcode(::std::string&& value) {
  
  strcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestKeepalive.strCode)
}
#endif
inline void RestKeepalive::set_strcode(const char* value) {
  
  strcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestKeepalive.strCode)
}
inline void RestKeepalive::set_strcode(const char* value, size_t size) {
  
  strcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestKeepalive.strCode)
}
inline ::std::string* RestKeepalive::mutable_strcode() {
  
  // @@protoc_insertion_point(field_mutable:RestKeepalive.strCode)
  return strcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestKeepalive::release_strcode() {
  // @@protoc_insertion_point(field_release:RestKeepalive.strCode)
  
  return strcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestKeepalive::set_allocated_strcode(::std::string* strcode) {
  if (strcode != NULL) {
    
  } else {
    
  }
  strcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcode);
  // @@protoc_insertion_point(field_set_allocated:RestKeepalive.strCode)
}

// -------------------------------------------------------------------

// RestLogin

// bool bStatus = 1;
inline void RestLogin::clear_bstatus() {
  bstatus_ = false;
}
inline bool RestLogin::bstatus() const {
  // @@protoc_insertion_point(field_get:RestLogin.bStatus)
  return bstatus_;
}
inline void RestLogin::set_bstatus(bool value) {
  
  bstatus_ = value;
  // @@protoc_insertion_point(field_set:RestLogin.bStatus)
}

// string strSession = 2;
inline void RestLogin::clear_strsession() {
  strsession_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestLogin::strsession() const {
  // @@protoc_insertion_point(field_get:RestLogin.strSession)
  return strsession_.GetNoArena();
}
inline void RestLogin::set_strsession(const ::std::string& value) {
  
  strsession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestLogin.strSession)
}
#if LANG_CXX11
inline void RestLogin::set_strsession(::std::string&& value) {
  
  strsession_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestLogin.strSession)
}
#endif
inline void RestLogin::set_strsession(const char* value) {
  
  strsession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestLogin.strSession)
}
inline void RestLogin::set_strsession(const char* value, size_t size) {
  
  strsession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestLogin.strSession)
}
inline ::std::string* RestLogin::mutable_strsession() {
  
  // @@protoc_insertion_point(field_mutable:RestLogin.strSession)
  return strsession_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestLogin::release_strsession() {
  // @@protoc_insertion_point(field_release:RestLogin.strSession)
  
  return strsession_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestLogin::set_allocated_strsession(::std::string* strsession) {
  if (strsession != NULL) {
    
  } else {
    
  }
  strsession_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strsession);
  // @@protoc_insertion_point(field_set_allocated:RestLogin.strSession)
}

// int32 nTimeout = 3;
inline void RestLogin::clear_ntimeout() {
  ntimeout_ = 0;
}
inline ::google::protobuf::int32 RestLogin::ntimeout() const {
  // @@protoc_insertion_point(field_get:RestLogin.nTimeout)
  return ntimeout_;
}
inline void RestLogin::set_ntimeout(::google::protobuf::int32 value) {
  
  ntimeout_ = value;
  // @@protoc_insertion_point(field_set:RestLogin.nTimeout)
}

// -------------------------------------------------------------------

// RestLogout

// bool bStatus = 1;
inline void RestLogout::clear_bstatus() {
  bstatus_ = false;
}
inline bool RestLogout::bstatus() const {
  // @@protoc_insertion_point(field_get:RestLogout.bStatus)
  return bstatus_;
}
inline void RestLogout::set_bstatus(bool value) {
  
  bstatus_ = value;
  // @@protoc_insertion_point(field_set:RestLogout.bStatus)
}

// string strCode = 2;
inline void RestLogout::clear_strcode() {
  strcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestLogout::strcode() const {
  // @@protoc_insertion_point(field_get:RestLogout.strCode)
  return strcode_.GetNoArena();
}
inline void RestLogout::set_strcode(const ::std::string& value) {
  
  strcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestLogout.strCode)
}
#if LANG_CXX11
inline void RestLogout::set_strcode(::std::string&& value) {
  
  strcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestLogout.strCode)
}
#endif
inline void RestLogout::set_strcode(const char* value) {
  
  strcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestLogout.strCode)
}
inline void RestLogout::set_strcode(const char* value, size_t size) {
  
  strcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestLogout.strCode)
}
inline ::std::string* RestLogout::mutable_strcode() {
  
  // @@protoc_insertion_point(field_mutable:RestLogout.strCode)
  return strcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestLogout::release_strcode() {
  // @@protoc_insertion_point(field_release:RestLogout.strCode)
  
  return strcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestLogout::set_allocated_strcode(::std::string* strcode) {
  if (strcode != NULL) {
    
  } else {
    
  }
  strcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcode);
  // @@protoc_insertion_point(field_set_allocated:RestLogout.strCode)
}

// -------------------------------------------------------------------

// RestUpdateUser

// bool bStatus = 1;
inline void RestUpdateUser::clear_bstatus() {
  bstatus_ = false;
}
inline bool RestUpdateUser::bstatus() const {
  // @@protoc_insertion_point(field_get:RestUpdateUser.bStatus)
  return bstatus_;
}
inline void RestUpdateUser::set_bstatus(bool value) {
  
  bstatus_ = value;
  // @@protoc_insertion_point(field_set:RestUpdateUser.bStatus)
}

// string strCode = 2;
inline void RestUpdateUser::clear_strcode() {
  strcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestUpdateUser::strcode() const {
  // @@protoc_insertion_point(field_get:RestUpdateUser.strCode)
  return strcode_.GetNoArena();
}
inline void RestUpdateUser::set_strcode(const ::std::string& value) {
  
  strcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RestUpdateUser.strCode)
}
#if LANG_CXX11
inline void RestUpdateUser::set_strcode(::std::string&& value) {
  
  strcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RestUpdateUser.strCode)
}
#endif
inline void RestUpdateUser::set_strcode(const char* value) {
  
  strcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RestUpdateUser.strCode)
}
inline void RestUpdateUser::set_strcode(const char* value, size_t size) {
  
  strcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RestUpdateUser.strCode)
}
inline ::std::string* RestUpdateUser::mutable_strcode() {
  
  // @@protoc_insertion_point(field_mutable:RestUpdateUser.strCode)
  return strcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestUpdateUser::release_strcode() {
  // @@protoc_insertion_point(field_release:RestUpdateUser.strCode)
  
  return strcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestUpdateUser::set_allocated_strcode(::std::string* strcode) {
  if (strcode != NULL) {
    
  } else {
    
  }
  strcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcode);
  // @@protoc_insertion_point(field_set_allocated:RestUpdateUser.strCode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_restsystem_2eproto__INCLUDED
